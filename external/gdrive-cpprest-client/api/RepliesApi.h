/**
 * Drive
 * Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * RepliesApi.h
 *
 * 
 */

#ifndef RepliesApi_H_
#define RepliesApi_H_


#include "ApiClient.h"

#include "Reply.h"
#include "ReplyList.h"
#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace api {

using namespace io::swagger::client::model;

class  RepliesApi
{
public:
    RepliesApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~RepliesApi();
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Creates a new reply to a comment.
    /// </remarks>
    /// <param name="commentId">The ID of the comment.</param>/// <param name="fileId">The ID of the file.</param>/// <param name="alt">Data format for the response. (optional, default to json)</param>/// <param name="fields">Selector specifying which fields to include in a partial response. (optional)</param>/// <param name="key">API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)</param>/// <param name="oauthToken">OAuth 2.0 token for the current user. (optional)</param>/// <param name="prettyPrint">Returns response with indentations and line breaks. (optional, default to true)</param>/// <param name="quotaUser">Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)</param>/// <param name="userIp">IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)</param>/// <param name="body"> (optional)</param>
    pplx::task<std::shared_ptr<Reply>> create(utility::string_t commentId, utility::string_t fileId, utility::string_t alt, utility::string_t fields, utility::string_t key, utility::string_t oauthToken, bool prettyPrint, utility::string_t quotaUser, utility::string_t userIp, std::shared_ptr<Reply> body);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Deletes a reply.
    /// </remarks>
    /// <param name="commentId">The ID of the comment.</param>/// <param name="fileId">The ID of the file.</param>/// <param name="replyId">The ID of the reply.</param>/// <param name="alt">Data format for the response. (optional, default to json)</param>/// <param name="fields">Selector specifying which fields to include in a partial response. (optional)</param>/// <param name="key">API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)</param>/// <param name="oauthToken">OAuth 2.0 token for the current user. (optional)</param>/// <param name="prettyPrint">Returns response with indentations and line breaks. (optional, default to true)</param>/// <param name="quotaUser">Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)</param>/// <param name="userIp">IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)</param>
    pplx::task<void> delete_(utility::string_t commentId, utility::string_t fileId, utility::string_t replyId, utility::string_t alt, utility::string_t fields, utility::string_t key, utility::string_t oauthToken, bool prettyPrint, utility::string_t quotaUser, utility::string_t userIp);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets a reply by ID.
    /// </remarks>
    /// <param name="commentId">The ID of the comment.</param>/// <param name="fileId">The ID of the file.</param>/// <param name="replyId">The ID of the reply.</param>/// <param name="alt">Data format for the response. (optional, default to json)</param>/// <param name="fields">Selector specifying which fields to include in a partial response. (optional)</param>/// <param name="key">API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)</param>/// <param name="oauthToken">OAuth 2.0 token for the current user. (optional)</param>/// <param name="prettyPrint">Returns response with indentations and line breaks. (optional, default to true)</param>/// <param name="quotaUser">Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)</param>/// <param name="userIp">IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)</param>/// <param name="includeDeleted">Whether to return deleted replies. Deleted replies will not include their original content. (optional, default to false)</param>
    pplx::task<std::shared_ptr<Reply>> get(utility::string_t commentId, utility::string_t fileId, utility::string_t replyId, utility::string_t alt, utility::string_t fields, utility::string_t key, utility::string_t oauthToken, bool prettyPrint, utility::string_t quotaUser, utility::string_t userIp, bool includeDeleted);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Lists a comment&#39;s replies.
    /// </remarks>
    /// <param name="commentId">The ID of the comment.</param>/// <param name="fileId">The ID of the file.</param>/// <param name="alt">Data format for the response. (optional, default to json)</param>/// <param name="fields">Selector specifying which fields to include in a partial response. (optional)</param>/// <param name="key">API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)</param>/// <param name="oauthToken">OAuth 2.0 token for the current user. (optional)</param>/// <param name="prettyPrint">Returns response with indentations and line breaks. (optional, default to true)</param>/// <param name="quotaUser">Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)</param>/// <param name="userIp">IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)</param>/// <param name="includeDeleted">Whether to include deleted replies. Deleted replies will not include their original content. (optional, default to false)</param>/// <param name="pageSize">The maximum number of replies to return per page. (optional, default to 20)</param>/// <param name="pageToken">The token for continuing a previous list request on the next page. This should be set to the value of &#39;nextPageToken&#39; from the previous response. (optional)</param>
    pplx::task<std::shared_ptr<ReplyList>> list(utility::string_t commentId, utility::string_t fileId, utility::string_t alt, utility::string_t fields, utility::string_t key, utility::string_t oauthToken, bool prettyPrint, utility::string_t quotaUser, utility::string_t userIp, bool includeDeleted, int32_t pageSize, utility::string_t pageToken);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Updates a reply with patch semantics.
    /// </remarks>
    /// <param name="commentId">The ID of the comment.</param>/// <param name="fileId">The ID of the file.</param>/// <param name="replyId">The ID of the reply.</param>/// <param name="alt">Data format for the response. (optional, default to json)</param>/// <param name="fields">Selector specifying which fields to include in a partial response. (optional)</param>/// <param name="key">API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)</param>/// <param name="oauthToken">OAuth 2.0 token for the current user. (optional)</param>/// <param name="prettyPrint">Returns response with indentations and line breaks. (optional, default to true)</param>/// <param name="quotaUser">Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided. (optional)</param>/// <param name="userIp">IP address of the site where the request originates. Use this if you want to enforce per-user limits. (optional)</param>/// <param name="body"> (optional)</param>
    pplx::task<std::shared_ptr<Reply>> update(utility::string_t commentId, utility::string_t fileId, utility::string_t replyId, utility::string_t alt, utility::string_t fields, utility::string_t key, utility::string_t oauthToken, bool prettyPrint, utility::string_t quotaUser, utility::string_t userIp, std::shared_ptr<Reply> body);

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* RepliesApi_H_ */

