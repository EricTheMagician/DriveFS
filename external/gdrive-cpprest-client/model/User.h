/**
 * Drive
 * Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * User.h
 *
 * Information about a Drive user.
 */

#ifndef User_H_
#define User_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// Information about a Drive user.
/// </summary>
class  User
    : public ModelBase
{
public:
    User();
    virtual ~User();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// User members

    /// <summary>
    /// A plain text displayable name for this user.
    /// </summary>
    utility::string_t getDisplayName() const;
    bool displayNameIsSet() const;
    void unsetDisplayName();
    void setDisplayName(utility::string_t value);
    /// <summary>
    /// The email address of the user. This may not be present in certain contexts if the user has not made their email address visible to the requester.
    /// </summary>
    utility::string_t getEmailAddress() const;
    bool emailAddressIsSet() const;
    void unsetEmailAddress();
    void setEmailAddress(utility::string_t value);
    /// <summary>
    /// Identifies what kind of resource this is. Value: the fixed string \&quot;drive#user\&quot;.
    /// </summary>
    utility::string_t getKind() const;
    bool kindIsSet() const;
    void unsetKind();
    void setKind(utility::string_t value);
    /// <summary>
    /// Whether this user is the requesting user.
    /// </summary>
    bool getMe() const;
    bool meIsSet() const;
    void unsetMe();
    void setMe(bool value);
    /// <summary>
    /// The user&#39;s ID as visible in Permission resources.
    /// </summary>
    utility::string_t getPermissionId() const;
    bool permissionIdIsSet() const;
    void unsetPermissionId();
    void setPermissionId(utility::string_t value);
    /// <summary>
    /// A link to the user&#39;s profile photo, if available.
    /// </summary>
    utility::string_t getPhotoLink() const;
    bool photoLinkIsSet() const;
    void unsetPhotoLink();
    void setPhotoLink(utility::string_t value);

protected:
    utility::string_t m_DisplayName;
    bool m_DisplayNameIsSet;
    utility::string_t m_EmailAddress;
    bool m_EmailAddressIsSet;
    utility::string_t m_Kind;
    bool m_KindIsSet;
    bool m_Me;
    bool m_MeIsSet;
    utility::string_t m_PermissionId;
    bool m_PermissionIdIsSet;
    utility::string_t m_PhotoLink;
    bool m_PhotoLinkIsSet;
};

}
}
}
}

#endif /* User_H_ */
