/**
 * Drive
 * Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Channel.h
 *
 * An notification channel used to watch for resource changes.
 */

#ifndef Channel_H_
#define Channel_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <map>
#include <vector>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// An notification channel used to watch for resource changes.
/// </summary>
class  Channel
    : public ModelBase
{
public:
    Channel();
    virtual ~Channel();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Channel members

    /// <summary>
    /// The address where notifications are delivered for this channel.
    /// </summary>
    utility::string_t getAddress() const;
    bool addressIsSet() const;
    void unsetAddress();
    void setAddress(utility::string_t value);
    /// <summary>
    /// Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.
    /// </summary>
    utility::string_t getExpiration() const;
    bool expirationIsSet() const;
    void unsetExpiration();
    void setExpiration(utility::string_t value);
    /// <summary>
    /// A UUID or similar unique string that identifies this channel.
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();
    void setId(utility::string_t value);
    /// <summary>
    /// Identifies this as a notification channel used to watch for changes to a resource. Value: the fixed string \&quot;api#channel\&quot;.
    /// </summary>
    utility::string_t getKind() const;
    bool kindIsSet() const;
    void unsetKind();
    void setKind(utility::string_t value);
    /// <summary>
    /// Additional parameters controlling delivery channel behavior. Optional.
    /// </summary>
    std::map<utility::string_t, utility::string_t>& getParams();
    bool paramsIsSet() const;
    void unsetParams();
    void setParams(std::map<utility::string_t, utility::string_t> value);
    /// <summary>
    /// A Boolean value to indicate whether payload is wanted. Optional.
    /// </summary>
    bool getPayload() const;
    bool payloadIsSet() const;
    void unsetPayload();
    void setPayload(bool value);
    /// <summary>
    /// An opaque ID that identifies the resource being watched on this channel. Stable across different API versions.
    /// </summary>
    utility::string_t getResourceId() const;
    bool resourceIdIsSet() const;
    void unsetResourceId();
    void setResourceId(utility::string_t value);
    /// <summary>
    /// A version-specific identifier for the watched resource.
    /// </summary>
    utility::string_t getResourceUri() const;
    bool resourceUriIsSet() const;
    void unsetResourceUri();
    void setResourceUri(utility::string_t value);
    /// <summary>
    /// An arbitrary string delivered to the target address with each notification delivered over this channel. Optional.
    /// </summary>
    utility::string_t getToken() const;
    bool tokenIsSet() const;
    void unsetToken();
    void setToken(utility::string_t value);
    /// <summary>
    /// The type of delivery mechanism used for this channel.
    /// </summary>
    utility::string_t getType() const;
    bool typeIsSet() const;
    void unsetType();
    void setType(utility::string_t value);

protected:
    utility::string_t m_Address;
    bool m_AddressIsSet;
    utility::string_t m_Expiration;
    bool m_ExpirationIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Kind;
    bool m_KindIsSet;
    std::map<utility::string_t, utility::string_t> m_Params;
    bool m_ParamsIsSet;
    bool m_Payload;
    bool m_PayloadIsSet;
    utility::string_t m_ResourceId;
    bool m_ResourceIdIsSet;
    utility::string_t m_ResourceUri;
    bool m_ResourceUriIsSet;
    utility::string_t m_Token;
    bool m_TokenIsSet;
    utility::string_t m_Type;
    bool m_TypeIsSet;
};

}
}
}
}

#endif /* Channel_H_ */
