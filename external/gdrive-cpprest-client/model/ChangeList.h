/**
 * Drive
 * Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * ChangeList.h
 *
 * A list of changes for a user.
 */

#ifndef ChangeList_H_
#define ChangeList_H_


#include "ModelBase.h"

#include "Change.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// A list of changes for a user.
/// </summary>
class  ChangeList
    : public ModelBase
{
public:
    ChangeList();
    virtual ~ChangeList();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ChangeList members

    /// <summary>
    /// The list of changes. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
    /// </summary>
    std::vector<std::shared_ptr<Change>>& getChanges();
    bool changesIsSet() const;
    void unsetChanges();
    void setChanges(std::vector<std::shared_ptr<Change>> value);
    /// <summary>
    /// Identifies what kind of resource this is. Value: the fixed string \&quot;drive#changeList\&quot;.
    /// </summary>
    utility::string_t getKind() const;
    bool kindIsSet() const;
    void unsetKind();
    void setKind(utility::string_t value);
    /// <summary>
    /// The starting page token for future changes. This will be present only if the end of the current changes list has been reached.
    /// </summary>
    utility::string_t getNewStartPageToken() const;
    bool newStartPageTokenIsSet() const;
    void unsetNewStartPageToken();
    void setNewStartPageToken(utility::string_t value);
    /// <summary>
    /// The page token for the next page of changes. This will be absent if the end of the changes list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results.
    /// </summary>
    utility::string_t getNextPageToken() const;
    bool nextPageTokenIsSet() const;
    void unsetNextPageToken();
    void setNextPageToken(utility::string_t value);

protected:
    std::vector<std::shared_ptr<Change>> m_Changes;
    bool m_ChangesIsSet;
    utility::string_t m_Kind;
    bool m_KindIsSet;
    utility::string_t m_NewStartPageToken;
    bool m_NewStartPageTokenIsSet;
    utility::string_t m_NextPageToken;
    bool m_NextPageTokenIsSet;
};

}
}
}
}

#endif /* ChangeList_H_ */
