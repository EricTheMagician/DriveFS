/**
 * Drive
 * Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "File_videoMediaMetadata.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

File_videoMediaMetadata::File_videoMediaMetadata()
{
    m_DurationMillis = U("");
    m_DurationMillisIsSet = false;
    m_Height = 0;
    m_HeightIsSet = false;
    m_Width = 0;
    m_WidthIsSet = false;
}

File_videoMediaMetadata::~File_videoMediaMetadata()
{
}

void File_videoMediaMetadata::validate()
{
    // TODO: implement validation
}

web::json::value File_videoMediaMetadata::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_DurationMillisIsSet)
    {
        val[U("durationMillis")] = ModelBase::toJson(m_DurationMillis);
    }
    if(m_HeightIsSet)
    {
        val[U("height")] = ModelBase::toJson(m_Height);
    }
    if(m_WidthIsSet)
    {
        val[U("width")] = ModelBase::toJson(m_Width);
    }

    return val;
}

void File_videoMediaMetadata::fromJson(web::json::value& val)
{
    if(val.has_field(U("durationMillis")))
    {
        setDurationMillis(ModelBase::stringFromJson(val[U("durationMillis")]));
    }
    if(val.has_field(U("height")))
    {
        setHeight(ModelBase::int32_tFromJson(val[U("height")]));
    }
    if(val.has_field(U("width")))
    {
        setWidth(ModelBase::int32_tFromJson(val[U("width")]));
    }
}

void File_videoMediaMetadata::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_DurationMillisIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("durationMillis"), m_DurationMillis));
        
    }
    if(m_HeightIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("height"), m_Height));
    }
    if(m_WidthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("width"), m_Width));
    }
}

void File_videoMediaMetadata::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("durationMillis")))
    {
        setDurationMillis(ModelBase::stringFromHttpContent(multipart->getContent(U("durationMillis"))));
    }
    if(multipart->hasContent(U("height")))
    {
        setHeight(ModelBase::int32_tFromHttpContent(multipart->getContent(U("height"))));
    }
    if(multipart->hasContent(U("width")))
    {
        setWidth(ModelBase::int32_tFromHttpContent(multipart->getContent(U("width"))));
    }
}

utility::string_t File_videoMediaMetadata::getDurationMillis() const
{
    return m_DurationMillis;
}


void File_videoMediaMetadata::setDurationMillis(utility::string_t value)
{
    m_DurationMillis = value;
    m_DurationMillisIsSet = true;
}
bool File_videoMediaMetadata::durationMillisIsSet() const
{
    return m_DurationMillisIsSet;
}

void File_videoMediaMetadata::unsetDurationMillis()
{
    m_DurationMillisIsSet = false;
}

int32_t File_videoMediaMetadata::getHeight() const
{
    return m_Height;
}


void File_videoMediaMetadata::setHeight(int32_t value)
{
    m_Height = value;
    m_HeightIsSet = true;
}
bool File_videoMediaMetadata::heightIsSet() const
{
    return m_HeightIsSet;
}

void File_videoMediaMetadata::unsetHeight()
{
    m_HeightIsSet = false;
}

int32_t File_videoMediaMetadata::getWidth() const
{
    return m_Width;
}


void File_videoMediaMetadata::setWidth(int32_t value)
{
    m_Width = value;
    m_WidthIsSet = true;
}
bool File_videoMediaMetadata::widthIsSet() const
{
    return m_WidthIsSet;
}

void File_videoMediaMetadata::unsetWidth()
{
    m_WidthIsSet = false;
}

}
}
}
}

