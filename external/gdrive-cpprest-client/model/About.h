/**
 * Drive
 * Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * About.h
 *
 * Information about the user, the user&#39;s Drive, and system capabilities.
 */

#ifndef About_H_
#define About_H_


#include "ModelBase.h"

#include "About_teamDriveThemes.h"
#include <cpprest/details/basic_types.h>
#include "About_storageQuota.h"
#include <map>
#include <vector>
#include "User.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// Information about the user, the user&#39;s Drive, and system capabilities.
/// </summary>
class  About
    : public ModelBase
{
public:
    About();
    virtual ~About();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// About members

    /// <summary>
    /// Whether the user has installed the requesting app.
    /// </summary>
    bool getAppInstalled() const;
    bool appInstalledIsSet() const;
    void unsetAppInstalled();
    void setAppInstalled(bool value);
    /// <summary>
    /// Whether the user can create Team Drives.
    /// </summary>
    bool getCanCreateTeamDrives() const;
    bool canCreateTeamDrivesIsSet() const;
    void unsetCanCreateTeamDrives();
    void setCanCreateTeamDrives(bool value);
    /// <summary>
    /// A map of source MIME type to possible targets for all supported exports.
    /// </summary>
    std::map<utility::string_t, std::vector<utility::string_t>>& getExportFormats();
    bool exportFormatsIsSet() const;
    void unsetExportFormats();
    void setExportFormats(std::map<utility::string_t, std::vector<utility::string_t>> value);
    /// <summary>
    /// The currently supported folder colors as RGB hex strings.
    /// </summary>
    std::vector<utility::string_t>& getFolderColorPalette();
    bool folderColorPaletteIsSet() const;
    void unsetFolderColorPalette();
    void setFolderColorPalette(std::vector<utility::string_t> value);
    /// <summary>
    /// A map of source MIME type to possible targets for all supported imports.
    /// </summary>
    std::map<utility::string_t, std::vector<utility::string_t>>& getImportFormats();
    bool importFormatsIsSet() const;
    void unsetImportFormats();
    void setImportFormats(std::map<utility::string_t, std::vector<utility::string_t>> value);
    /// <summary>
    /// Identifies what kind of resource this is. Value: the fixed string \&quot;drive#about\&quot;.
    /// </summary>
    utility::string_t getKind() const;
    bool kindIsSet() const;
    void unsetKind();
    void setKind(utility::string_t value);
    /// <summary>
    /// A map of maximum import sizes by MIME type, in bytes.
    /// </summary>
    std::map<utility::string_t, utility::string_t>& getMaxImportSizes();
    bool maxImportSizesIsSet() const;
    void unsetMaxImportSizes();
    void setMaxImportSizes(std::map<utility::string_t, utility::string_t> value);
    /// <summary>
    /// The maximum upload size in bytes.
    /// </summary>
    utility::string_t getMaxUploadSize() const;
    bool maxUploadSizeIsSet() const;
    void unsetMaxUploadSize();
    void setMaxUploadSize(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<About_storageQuota> getStorageQuota() const;
    bool storageQuotaIsSet() const;
    void unsetStorageQuota();
    void setStorageQuota(std::shared_ptr<About_storageQuota> value);
    /// <summary>
    /// A list of themes that are supported for Team Drives.
    /// </summary>
    std::vector<std::shared_ptr<About_teamDriveThemes>>& getTeamDriveThemes();
    bool teamDriveThemesIsSet() const;
    void unsetTeamDriveThemes();
    void setTeamDriveThemes(std::vector<std::shared_ptr<About_teamDriveThemes>> value);
    /// <summary>
    /// The authenticated user.
    /// </summary>
    std::shared_ptr<User> getUser() const;
    bool userIsSet() const;
    void unsetUser();
    void setUser(std::shared_ptr<User> value);

protected:
    bool m_AppInstalled;
    bool m_AppInstalledIsSet;
    bool m_CanCreateTeamDrives;
    bool m_CanCreateTeamDrivesIsSet;
    std::map<utility::string_t, std::vector<utility::string_t>> m_ExportFormats;
    bool m_ExportFormatsIsSet;
    std::vector<utility::string_t> m_FolderColorPalette;
    bool m_FolderColorPaletteIsSet;
    std::map<utility::string_t, std::vector<utility::string_t>> m_ImportFormats;
    bool m_ImportFormatsIsSet;
    utility::string_t m_Kind;
    bool m_KindIsSet;
    std::map<utility::string_t, utility::string_t> m_MaxImportSizes;
    bool m_MaxImportSizesIsSet;
    utility::string_t m_MaxUploadSize;
    bool m_MaxUploadSizeIsSet;
    std::shared_ptr<About_storageQuota> m_StorageQuota;
    bool m_StorageQuotaIsSet;
    std::vector<std::shared_ptr<About_teamDriveThemes>> m_TeamDriveThemes;
    bool m_TeamDriveThemesIsSet;
    std::shared_ptr<User> m_User;
    bool m_UserIsSet;
};

}
}
}
}

#endif /* About_H_ */
