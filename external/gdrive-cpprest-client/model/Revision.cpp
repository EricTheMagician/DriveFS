/**
 * Drive
 * Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Revision.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Revision::Revision()
{
    m_Id = U("");
    m_IdIsSet = false;
    m_KeepForever = false;
    m_KeepForeverIsSet = false;
    m_Kind = U("");
    m_KindIsSet = false;
    m_LastModifyingUserIsSet = false;
    m_Md5Checksum = U("");
    m_Md5ChecksumIsSet = false;
    m_MimeType = U("");
    m_MimeTypeIsSet = false;
    m_ModifiedTime = utility::datetime();
    m_ModifiedTimeIsSet = false;
    m_OriginalFilename = U("");
    m_OriginalFilenameIsSet = false;
    m_PublishAuto = false;
    m_PublishAutoIsSet = false;
    m_Published = false;
    m_PublishedIsSet = false;
    m_PublishedOutsideDomain = false;
    m_PublishedOutsideDomainIsSet = false;
    m_Size = U("");
    m_SizeIsSet = false;
}

Revision::~Revision()
{
}

void Revision::validate()
{
    // TODO: implement validation
}

web::json::value Revision::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    if(m_KeepForeverIsSet)
    {
        val[U("keepForever")] = ModelBase::toJson(m_KeepForever);
    }
    if(m_KindIsSet)
    {
        val[U("kind")] = ModelBase::toJson(m_Kind);
    }
    if(m_LastModifyingUserIsSet)
    {
        val[U("lastModifyingUser")] = ModelBase::toJson(m_LastModifyingUser);
    }
    if(m_Md5ChecksumIsSet)
    {
        val[U("md5Checksum")] = ModelBase::toJson(m_Md5Checksum);
    }
    if(m_MimeTypeIsSet)
    {
        val[U("mimeType")] = ModelBase::toJson(m_MimeType);
    }
    if(m_ModifiedTimeIsSet)
    {
        val[U("modifiedTime")] = ModelBase::toJson(m_ModifiedTime);
    }
    if(m_OriginalFilenameIsSet)
    {
        val[U("originalFilename")] = ModelBase::toJson(m_OriginalFilename);
    }
    if(m_PublishAutoIsSet)
    {
        val[U("publishAuto")] = ModelBase::toJson(m_PublishAuto);
    }
    if(m_PublishedIsSet)
    {
        val[U("published")] = ModelBase::toJson(m_Published);
    }
    if(m_PublishedOutsideDomainIsSet)
    {
        val[U("publishedOutsideDomain")] = ModelBase::toJson(m_PublishedOutsideDomain);
    }
    if(m_SizeIsSet)
    {
        val[U("size")] = ModelBase::toJson(m_Size);
    }

    return val;
}

void Revision::fromJson(web::json::value& val)
{
    if(val.has_field(U("id")))
    {
        setId(ModelBase::stringFromJson(val[U("id")]));
    }
    if(val.has_field(U("keepForever")))
    {
        setKeepForever(ModelBase::boolFromJson(val[U("keepForever")]));
    }
    if(val.has_field(U("kind")))
    {
        setKind(ModelBase::stringFromJson(val[U("kind")]));
    }
    if(val.has_field(U("lastModifyingUser")))
    {
        if(!val[U("lastModifyingUser")].is_null())
        {
            std::shared_ptr<User> newItem(new User());
            newItem->fromJson(val[U("lastModifyingUser")]);
            setLastModifyingUser( newItem );
        }
    }
    if(val.has_field(U("md5Checksum")))
    {
        setMd5Checksum(ModelBase::stringFromJson(val[U("md5Checksum")]));
    }
    if(val.has_field(U("mimeType")))
    {
        setMimeType(ModelBase::stringFromJson(val[U("mimeType")]));
    }
    if(val.has_field(U("modifiedTime")))
    {
        setModifiedTime(ModelBase::dateFromJson(val[U("modifiedTime")]));
    }
    if(val.has_field(U("originalFilename")))
    {
        setOriginalFilename(ModelBase::stringFromJson(val[U("originalFilename")]));
    }
    if(val.has_field(U("publishAuto")))
    {
        setPublishAuto(ModelBase::boolFromJson(val[U("publishAuto")]));
    }
    if(val.has_field(U("published")))
    {
        setPublished(ModelBase::boolFromJson(val[U("published")]));
    }
    if(val.has_field(U("publishedOutsideDomain")))
    {
        setPublishedOutsideDomain(ModelBase::boolFromJson(val[U("publishedOutsideDomain")]));
    }
    if(val.has_field(U("size")))
    {
        setSize(ModelBase::stringFromJson(val[U("size")]));
    }
}

void Revision::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
        
    }
    if(m_KeepForeverIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("keepForever"), m_KeepForever));
    }
    if(m_KindIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("kind"), m_Kind));
        
    }
    if(m_LastModifyingUserIsSet)
    {
        if (m_LastModifyingUser.get())
        {
            m_LastModifyingUser->toMultipart(multipart, U("lastModifyingUser."));
        }
        
    }
    if(m_Md5ChecksumIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("md5Checksum"), m_Md5Checksum));
        
    }
    if(m_MimeTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("mimeType"), m_MimeType));
        
    }
    if(m_ModifiedTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("modifiedTime"), m_ModifiedTime));
        
    }
    if(m_OriginalFilenameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("originalFilename"), m_OriginalFilename));
        
    }
    if(m_PublishAutoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("publishAuto"), m_PublishAuto));
    }
    if(m_PublishedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("published"), m_Published));
    }
    if(m_PublishedOutsideDomainIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("publishedOutsideDomain"), m_PublishedOutsideDomain));
    }
    if(m_SizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("size"), m_Size));
        
    }
}

void Revision::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::stringFromHttpContent(multipart->getContent(U("id"))));
    }
    if(multipart->hasContent(U("keepForever")))
    {
        setKeepForever(ModelBase::boolFromHttpContent(multipart->getContent(U("keepForever"))));
    }
    if(multipart->hasContent(U("kind")))
    {
        setKind(ModelBase::stringFromHttpContent(multipart->getContent(U("kind"))));
    }
    if(multipart->hasContent(U("lastModifyingUser")))
    {
        if(multipart->hasContent(U("lastModifyingUser")))
        {
            std::shared_ptr<User> newItem(new User());
            newItem->fromMultiPart(multipart, U("lastModifyingUser."));
            setLastModifyingUser( newItem );
        }
    }
    if(multipart->hasContent(U("md5Checksum")))
    {
        setMd5Checksum(ModelBase::stringFromHttpContent(multipart->getContent(U("md5Checksum"))));
    }
    if(multipart->hasContent(U("mimeType")))
    {
        setMimeType(ModelBase::stringFromHttpContent(multipart->getContent(U("mimeType"))));
    }
    if(multipart->hasContent(U("modifiedTime")))
    {
        setModifiedTime(ModelBase::dateFromHttpContent(multipart->getContent(U("modifiedTime"))));
    }
    if(multipart->hasContent(U("originalFilename")))
    {
        setOriginalFilename(ModelBase::stringFromHttpContent(multipart->getContent(U("originalFilename"))));
    }
    if(multipart->hasContent(U("publishAuto")))
    {
        setPublishAuto(ModelBase::boolFromHttpContent(multipart->getContent(U("publishAuto"))));
    }
    if(multipart->hasContent(U("published")))
    {
        setPublished(ModelBase::boolFromHttpContent(multipart->getContent(U("published"))));
    }
    if(multipart->hasContent(U("publishedOutsideDomain")))
    {
        setPublishedOutsideDomain(ModelBase::boolFromHttpContent(multipart->getContent(U("publishedOutsideDomain"))));
    }
    if(multipart->hasContent(U("size")))
    {
        setSize(ModelBase::stringFromHttpContent(multipart->getContent(U("size"))));
    }
}

utility::string_t Revision::getId() const
{
    return m_Id;
}


void Revision::setId(utility::string_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool Revision::idIsSet() const
{
    return m_IdIsSet;
}

void Revision::unsetId()
{
    m_IdIsSet = false;
}

bool Revision::getKeepForever() const
{
    return m_KeepForever;
}


void Revision::setKeepForever(bool value)
{
    m_KeepForever = value;
    m_KeepForeverIsSet = true;
}
bool Revision::keepForeverIsSet() const
{
    return m_KeepForeverIsSet;
}

void Revision::unsetKeepForever()
{
    m_KeepForeverIsSet = false;
}

utility::string_t Revision::getKind() const
{
    return m_Kind;
}


void Revision::setKind(utility::string_t value)
{
    m_Kind = value;
    m_KindIsSet = true;
}
bool Revision::kindIsSet() const
{
    return m_KindIsSet;
}

void Revision::unsetKind()
{
    m_KindIsSet = false;
}

std::shared_ptr<User> Revision::getLastModifyingUser() const
{
    return m_LastModifyingUser;
}


void Revision::setLastModifyingUser(std::shared_ptr<User> value)
{
    m_LastModifyingUser = value;
    m_LastModifyingUserIsSet = true;
}
bool Revision::lastModifyingUserIsSet() const
{
    return m_LastModifyingUserIsSet;
}

void Revision::unsetLastModifyingUser()
{
    m_LastModifyingUserIsSet = false;
}

utility::string_t Revision::getMd5Checksum() const
{
    return m_Md5Checksum;
}


void Revision::setMd5Checksum(utility::string_t value)
{
    m_Md5Checksum = value;
    m_Md5ChecksumIsSet = true;
}
bool Revision::md5ChecksumIsSet() const
{
    return m_Md5ChecksumIsSet;
}

void Revision::unsetMd5Checksum()
{
    m_Md5ChecksumIsSet = false;
}

utility::string_t Revision::getMimeType() const
{
    return m_MimeType;
}


void Revision::setMimeType(utility::string_t value)
{
    m_MimeType = value;
    m_MimeTypeIsSet = true;
}
bool Revision::mimeTypeIsSet() const
{
    return m_MimeTypeIsSet;
}

void Revision::unsetMimeType()
{
    m_MimeTypeIsSet = false;
}

utility::datetime Revision::getModifiedTime() const
{
    return m_ModifiedTime;
}


void Revision::setModifiedTime(utility::datetime value)
{
    m_ModifiedTime = value;
    m_ModifiedTimeIsSet = true;
}
bool Revision::modifiedTimeIsSet() const
{
    return m_ModifiedTimeIsSet;
}

void Revision::unsetModifiedTime()
{
    m_ModifiedTimeIsSet = false;
}

utility::string_t Revision::getOriginalFilename() const
{
    return m_OriginalFilename;
}


void Revision::setOriginalFilename(utility::string_t value)
{
    m_OriginalFilename = value;
    m_OriginalFilenameIsSet = true;
}
bool Revision::originalFilenameIsSet() const
{
    return m_OriginalFilenameIsSet;
}

void Revision::unsetOriginalFilename()
{
    m_OriginalFilenameIsSet = false;
}

bool Revision::getPublishAuto() const
{
    return m_PublishAuto;
}


void Revision::setPublishAuto(bool value)
{
    m_PublishAuto = value;
    m_PublishAutoIsSet = true;
}
bool Revision::publishAutoIsSet() const
{
    return m_PublishAutoIsSet;
}

void Revision::unsetPublishAuto()
{
    m_PublishAutoIsSet = false;
}

bool Revision::getPublished() const
{
    return m_Published;
}


void Revision::setPublished(bool value)
{
    m_Published = value;
    m_PublishedIsSet = true;
}
bool Revision::publishedIsSet() const
{
    return m_PublishedIsSet;
}

void Revision::unsetPublished()
{
    m_PublishedIsSet = false;
}

bool Revision::getPublishedOutsideDomain() const
{
    return m_PublishedOutsideDomain;
}


void Revision::setPublishedOutsideDomain(bool value)
{
    m_PublishedOutsideDomain = value;
    m_PublishedOutsideDomainIsSet = true;
}
bool Revision::publishedOutsideDomainIsSet() const
{
    return m_PublishedOutsideDomainIsSet;
}

void Revision::unsetPublishedOutsideDomain()
{
    m_PublishedOutsideDomainIsSet = false;
}

utility::string_t Revision::getSize() const
{
    return m_Size;
}


void Revision::setSize(utility::string_t value)
{
    m_Size = value;
    m_SizeIsSet = true;
}
bool Revision::sizeIsSet() const
{
    return m_SizeIsSet;
}

void Revision::unsetSize()
{
    m_SizeIsSet = false;
}

}
}
}
}

