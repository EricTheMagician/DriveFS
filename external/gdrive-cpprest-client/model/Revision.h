/**
 * Drive
 * Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Revision.h
 *
 * The metadata for a revision to a file.
 */

#ifndef Revision_H_
#define Revision_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "User.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// The metadata for a revision to a file.
/// </summary>
class  Revision
    : public ModelBase
{
public:
    Revision();
    virtual ~Revision();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Revision members

    /// <summary>
    /// The ID of the revision.
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();
    void setId(utility::string_t value);
    /// <summary>
    /// Whether to keep this revision forever, even if it is no longer the head revision. If not set, the revision will be automatically purged 30 days after newer content is uploaded. This can be set on a maximum of 200 revisions for a file. This field is only applicable to files with binary content in Drive.
    /// </summary>
    bool getKeepForever() const;
    bool keepForeverIsSet() const;
    void unsetKeepForever();
    void setKeepForever(bool value);
    /// <summary>
    /// Identifies what kind of resource this is. Value: the fixed string \&quot;drive#revision\&quot;.
    /// </summary>
    utility::string_t getKind() const;
    bool kindIsSet() const;
    void unsetKind();
    void setKind(utility::string_t value);
    /// <summary>
    /// The last user to modify this revision.
    /// </summary>
    std::shared_ptr<User> getLastModifyingUser() const;
    bool lastModifyingUserIsSet() const;
    void unsetLastModifyingUser();
    void setLastModifyingUser(std::shared_ptr<User> value);
    /// <summary>
    /// The MD5 checksum of the revision&#39;s content. This is only applicable to files with binary content in Drive.
    /// </summary>
    utility::string_t getMd5Checksum() const;
    bool md5ChecksumIsSet() const;
    void unsetMd5Checksum();
    void setMd5Checksum(utility::string_t value);
    /// <summary>
    /// The MIME type of the revision.
    /// </summary>
    utility::string_t getMimeType() const;
    bool mimeTypeIsSet() const;
    void unsetMimeType();
    void setMimeType(utility::string_t value);
    /// <summary>
    /// The last time the revision was modified (RFC 3339 date-time).
    /// </summary>
    utility::datetime getModifiedTime() const;
    bool modifiedTimeIsSet() const;
    void unsetModifiedTime();
    void setModifiedTime(utility::datetime value);
    /// <summary>
    /// The original filename used to create this revision. This is only applicable to files with binary content in Drive.
    /// </summary>
    utility::string_t getOriginalFilename() const;
    bool originalFilenameIsSet() const;
    void unsetOriginalFilename();
    void setOriginalFilename(utility::string_t value);
    /// <summary>
    /// Whether subsequent revisions will be automatically republished. This is only applicable to Google Docs.
    /// </summary>
    bool getPublishAuto() const;
    bool publishAutoIsSet() const;
    void unsetPublishAuto();
    void setPublishAuto(bool value);
    /// <summary>
    /// Whether this revision is published. This is only applicable to Google Docs.
    /// </summary>
    bool getPublished() const;
    bool publishedIsSet() const;
    void unsetPublished();
    void setPublished(bool value);
    /// <summary>
    /// Whether this revision is published outside the domain. This is only applicable to Google Docs.
    /// </summary>
    bool getPublishedOutsideDomain() const;
    bool publishedOutsideDomainIsSet() const;
    void unsetPublishedOutsideDomain();
    void setPublishedOutsideDomain(bool value);
    /// <summary>
    /// The size of the revision&#39;s content in bytes. This is only applicable to files with binary content in Drive.
    /// </summary>
    utility::string_t getSize() const;
    bool sizeIsSet() const;
    void unsetSize();
    void setSize(utility::string_t value);

protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    bool m_KeepForever;
    bool m_KeepForeverIsSet;
    utility::string_t m_Kind;
    bool m_KindIsSet;
    std::shared_ptr<User> m_LastModifyingUser;
    bool m_LastModifyingUserIsSet;
    utility::string_t m_Md5Checksum;
    bool m_Md5ChecksumIsSet;
    utility::string_t m_MimeType;
    bool m_MimeTypeIsSet;
    utility::datetime m_ModifiedTime;
    bool m_ModifiedTimeIsSet;
    utility::string_t m_OriginalFilename;
    bool m_OriginalFilenameIsSet;
    bool m_PublishAuto;
    bool m_PublishAutoIsSet;
    bool m_Published;
    bool m_PublishedIsSet;
    bool m_PublishedOutsideDomain;
    bool m_PublishedOutsideDomainIsSet;
    utility::string_t m_Size;
    bool m_SizeIsSet;
};

}
}
}
}

#endif /* Revision_H_ */
