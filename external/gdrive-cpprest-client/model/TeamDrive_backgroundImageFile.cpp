/**
 * Drive
 * Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "TeamDrive_backgroundImageFile.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

TeamDrive_backgroundImageFile::TeamDrive_backgroundImageFile()
{
    m_Id = U("");
    m_IdIsSet = false;
    m_Width = 0.0f;
    m_WidthIsSet = false;
    m_XCoordinate = 0.0f;
    m_XCoordinateIsSet = false;
    m_YCoordinate = 0.0f;
    m_YCoordinateIsSet = false;
}

TeamDrive_backgroundImageFile::~TeamDrive_backgroundImageFile()
{
}

void TeamDrive_backgroundImageFile::validate()
{
    // TODO: implement validation
}

web::json::value TeamDrive_backgroundImageFile::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    if(m_WidthIsSet)
    {
        val[U("width")] = ModelBase::toJson(m_Width);
    }
    if(m_XCoordinateIsSet)
    {
        val[U("xCoordinate")] = ModelBase::toJson(m_XCoordinate);
    }
    if(m_YCoordinateIsSet)
    {
        val[U("yCoordinate")] = ModelBase::toJson(m_YCoordinate);
    }

    return val;
}

void TeamDrive_backgroundImageFile::fromJson(web::json::value& val)
{
    if(val.has_field(U("id")))
    {
        setId(ModelBase::stringFromJson(val[U("id")]));
    }
    if(val.has_field(U("width")))
    {
        setWidth(ModelBase::floatFromJson(val[U("width")]));
    }
    if(val.has_field(U("xCoordinate")))
    {
        setXCoordinate(ModelBase::floatFromJson(val[U("xCoordinate")]));
    }
    if(val.has_field(U("yCoordinate")))
    {
        setYCoordinate(ModelBase::floatFromJson(val[U("yCoordinate")]));
    }
}

void TeamDrive_backgroundImageFile::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
        
    }
    if(m_WidthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("width"), m_Width));
    }
    if(m_XCoordinateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("xCoordinate"), m_XCoordinate));
    }
    if(m_YCoordinateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("yCoordinate"), m_YCoordinate));
    }
}

void TeamDrive_backgroundImageFile::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::stringFromHttpContent(multipart->getContent(U("id"))));
    }
    if(multipart->hasContent(U("width")))
    {
        setWidth(ModelBase::floatFromHttpContent(multipart->getContent(U("width"))));
    }
    if(multipart->hasContent(U("xCoordinate")))
    {
        setXCoordinate(ModelBase::floatFromHttpContent(multipart->getContent(U("xCoordinate"))));
    }
    if(multipart->hasContent(U("yCoordinate")))
    {
        setYCoordinate(ModelBase::floatFromHttpContent(multipart->getContent(U("yCoordinate"))));
    }
}

utility::string_t TeamDrive_backgroundImageFile::getId() const
{
    return m_Id;
}


void TeamDrive_backgroundImageFile::setId(utility::string_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool TeamDrive_backgroundImageFile::idIsSet() const
{
    return m_IdIsSet;
}

void TeamDrive_backgroundImageFile::unsetId()
{
    m_IdIsSet = false;
}

float TeamDrive_backgroundImageFile::getWidth() const
{
    return m_Width;
}


void TeamDrive_backgroundImageFile::setWidth(float value)
{
    m_Width = value;
    m_WidthIsSet = true;
}
bool TeamDrive_backgroundImageFile::widthIsSet() const
{
    return m_WidthIsSet;
}

void TeamDrive_backgroundImageFile::unsetWidth()
{
    m_WidthIsSet = false;
}

float TeamDrive_backgroundImageFile::getXCoordinate() const
{
    return m_XCoordinate;
}


void TeamDrive_backgroundImageFile::setXCoordinate(float value)
{
    m_XCoordinate = value;
    m_XCoordinateIsSet = true;
}
bool TeamDrive_backgroundImageFile::xCoordinateIsSet() const
{
    return m_XCoordinateIsSet;
}

void TeamDrive_backgroundImageFile::unsetXCoordinate()
{
    m_XCoordinateIsSet = false;
}

float TeamDrive_backgroundImageFile::getYCoordinate() const
{
    return m_YCoordinate;
}


void TeamDrive_backgroundImageFile::setYCoordinate(float value)
{
    m_YCoordinate = value;
    m_YCoordinateIsSet = true;
}
bool TeamDrive_backgroundImageFile::yCoordinateIsSet() const
{
    return m_YCoordinateIsSet;
}

void TeamDrive_backgroundImageFile::unsetYCoordinate()
{
    m_YCoordinateIsSet = false;
}

}
}
}
}

