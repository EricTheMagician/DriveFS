/**
 * Drive
 * Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "TeamDrive_capabilities.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

TeamDrive_capabilities::TeamDrive_capabilities()
{
    m_CanAddChildren = false;
    m_CanAddChildrenIsSet = false;
    m_CanChangeTeamDriveBackground = false;
    m_CanChangeTeamDriveBackgroundIsSet = false;
    m_CanComment = false;
    m_CanCommentIsSet = false;
    m_CanCopy = false;
    m_CanCopyIsSet = false;
    m_CanDeleteTeamDrive = false;
    m_CanDeleteTeamDriveIsSet = false;
    m_CanDownload = false;
    m_CanDownloadIsSet = false;
    m_CanEdit = false;
    m_CanEditIsSet = false;
    m_CanListChildren = false;
    m_CanListChildrenIsSet = false;
    m_CanManageMembers = false;
    m_CanManageMembersIsSet = false;
    m_CanReadRevisions = false;
    m_CanReadRevisionsIsSet = false;
    m_CanRemoveChildren = false;
    m_CanRemoveChildrenIsSet = false;
    m_CanRename = false;
    m_CanRenameIsSet = false;
    m_CanRenameTeamDrive = false;
    m_CanRenameTeamDriveIsSet = false;
    m_CanShare = false;
    m_CanShareIsSet = false;
}

TeamDrive_capabilities::~TeamDrive_capabilities()
{
}

void TeamDrive_capabilities::validate()
{
    // TODO: implement validation
}

web::json::value TeamDrive_capabilities::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_CanAddChildrenIsSet)
    {
        val[U("canAddChildren")] = ModelBase::toJson(m_CanAddChildren);
    }
    if(m_CanChangeTeamDriveBackgroundIsSet)
    {
        val[U("canChangeTeamDriveBackground")] = ModelBase::toJson(m_CanChangeTeamDriveBackground);
    }
    if(m_CanCommentIsSet)
    {
        val[U("canComment")] = ModelBase::toJson(m_CanComment);
    }
    if(m_CanCopyIsSet)
    {
        val[U("canCopy")] = ModelBase::toJson(m_CanCopy);
    }
    if(m_CanDeleteTeamDriveIsSet)
    {
        val[U("canDeleteTeamDrive")] = ModelBase::toJson(m_CanDeleteTeamDrive);
    }
    if(m_CanDownloadIsSet)
    {
        val[U("canDownload")] = ModelBase::toJson(m_CanDownload);
    }
    if(m_CanEditIsSet)
    {
        val[U("canEdit")] = ModelBase::toJson(m_CanEdit);
    }
    if(m_CanListChildrenIsSet)
    {
        val[U("canListChildren")] = ModelBase::toJson(m_CanListChildren);
    }
    if(m_CanManageMembersIsSet)
    {
        val[U("canManageMembers")] = ModelBase::toJson(m_CanManageMembers);
    }
    if(m_CanReadRevisionsIsSet)
    {
        val[U("canReadRevisions")] = ModelBase::toJson(m_CanReadRevisions);
    }
    if(m_CanRemoveChildrenIsSet)
    {
        val[U("canRemoveChildren")] = ModelBase::toJson(m_CanRemoveChildren);
    }
    if(m_CanRenameIsSet)
    {
        val[U("canRename")] = ModelBase::toJson(m_CanRename);
    }
    if(m_CanRenameTeamDriveIsSet)
    {
        val[U("canRenameTeamDrive")] = ModelBase::toJson(m_CanRenameTeamDrive);
    }
    if(m_CanShareIsSet)
    {
        val[U("canShare")] = ModelBase::toJson(m_CanShare);
    }

    return val;
}

void TeamDrive_capabilities::fromJson(web::json::value& val)
{
    if(val.has_field(U("canAddChildren")))
    {
        setCanAddChildren(ModelBase::boolFromJson(val[U("canAddChildren")]));
    }
    if(val.has_field(U("canChangeTeamDriveBackground")))
    {
        setCanChangeTeamDriveBackground(ModelBase::boolFromJson(val[U("canChangeTeamDriveBackground")]));
    }
    if(val.has_field(U("canComment")))
    {
        setCanComment(ModelBase::boolFromJson(val[U("canComment")]));
    }
    if(val.has_field(U("canCopy")))
    {
        setCanCopy(ModelBase::boolFromJson(val[U("canCopy")]));
    }
    if(val.has_field(U("canDeleteTeamDrive")))
    {
        setCanDeleteTeamDrive(ModelBase::boolFromJson(val[U("canDeleteTeamDrive")]));
    }
    if(val.has_field(U("canDownload")))
    {
        setCanDownload(ModelBase::boolFromJson(val[U("canDownload")]));
    }
    if(val.has_field(U("canEdit")))
    {
        setCanEdit(ModelBase::boolFromJson(val[U("canEdit")]));
    }
    if(val.has_field(U("canListChildren")))
    {
        setCanListChildren(ModelBase::boolFromJson(val[U("canListChildren")]));
    }
    if(val.has_field(U("canManageMembers")))
    {
        setCanManageMembers(ModelBase::boolFromJson(val[U("canManageMembers")]));
    }
    if(val.has_field(U("canReadRevisions")))
    {
        setCanReadRevisions(ModelBase::boolFromJson(val[U("canReadRevisions")]));
    }
    if(val.has_field(U("canRemoveChildren")))
    {
        setCanRemoveChildren(ModelBase::boolFromJson(val[U("canRemoveChildren")]));
    }
    if(val.has_field(U("canRename")))
    {
        setCanRename(ModelBase::boolFromJson(val[U("canRename")]));
    }
    if(val.has_field(U("canRenameTeamDrive")))
    {
        setCanRenameTeamDrive(ModelBase::boolFromJson(val[U("canRenameTeamDrive")]));
    }
    if(val.has_field(U("canShare")))
    {
        setCanShare(ModelBase::boolFromJson(val[U("canShare")]));
    }
}

void TeamDrive_capabilities::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_CanAddChildrenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("canAddChildren"), m_CanAddChildren));
    }
    if(m_CanChangeTeamDriveBackgroundIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("canChangeTeamDriveBackground"), m_CanChangeTeamDriveBackground));
    }
    if(m_CanCommentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("canComment"), m_CanComment));
    }
    if(m_CanCopyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("canCopy"), m_CanCopy));
    }
    if(m_CanDeleteTeamDriveIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("canDeleteTeamDrive"), m_CanDeleteTeamDrive));
    }
    if(m_CanDownloadIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("canDownload"), m_CanDownload));
    }
    if(m_CanEditIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("canEdit"), m_CanEdit));
    }
    if(m_CanListChildrenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("canListChildren"), m_CanListChildren));
    }
    if(m_CanManageMembersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("canManageMembers"), m_CanManageMembers));
    }
    if(m_CanReadRevisionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("canReadRevisions"), m_CanReadRevisions));
    }
    if(m_CanRemoveChildrenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("canRemoveChildren"), m_CanRemoveChildren));
    }
    if(m_CanRenameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("canRename"), m_CanRename));
    }
    if(m_CanRenameTeamDriveIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("canRenameTeamDrive"), m_CanRenameTeamDrive));
    }
    if(m_CanShareIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("canShare"), m_CanShare));
    }
}

void TeamDrive_capabilities::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("canAddChildren")))
    {
        setCanAddChildren(ModelBase::boolFromHttpContent(multipart->getContent(U("canAddChildren"))));
    }
    if(multipart->hasContent(U("canChangeTeamDriveBackground")))
    {
        setCanChangeTeamDriveBackground(ModelBase::boolFromHttpContent(multipart->getContent(U("canChangeTeamDriveBackground"))));
    }
    if(multipart->hasContent(U("canComment")))
    {
        setCanComment(ModelBase::boolFromHttpContent(multipart->getContent(U("canComment"))));
    }
    if(multipart->hasContent(U("canCopy")))
    {
        setCanCopy(ModelBase::boolFromHttpContent(multipart->getContent(U("canCopy"))));
    }
    if(multipart->hasContent(U("canDeleteTeamDrive")))
    {
        setCanDeleteTeamDrive(ModelBase::boolFromHttpContent(multipart->getContent(U("canDeleteTeamDrive"))));
    }
    if(multipart->hasContent(U("canDownload")))
    {
        setCanDownload(ModelBase::boolFromHttpContent(multipart->getContent(U("canDownload"))));
    }
    if(multipart->hasContent(U("canEdit")))
    {
        setCanEdit(ModelBase::boolFromHttpContent(multipart->getContent(U("canEdit"))));
    }
    if(multipart->hasContent(U("canListChildren")))
    {
        setCanListChildren(ModelBase::boolFromHttpContent(multipart->getContent(U("canListChildren"))));
    }
    if(multipart->hasContent(U("canManageMembers")))
    {
        setCanManageMembers(ModelBase::boolFromHttpContent(multipart->getContent(U("canManageMembers"))));
    }
    if(multipart->hasContent(U("canReadRevisions")))
    {
        setCanReadRevisions(ModelBase::boolFromHttpContent(multipart->getContent(U("canReadRevisions"))));
    }
    if(multipart->hasContent(U("canRemoveChildren")))
    {
        setCanRemoveChildren(ModelBase::boolFromHttpContent(multipart->getContent(U("canRemoveChildren"))));
    }
    if(multipart->hasContent(U("canRename")))
    {
        setCanRename(ModelBase::boolFromHttpContent(multipart->getContent(U("canRename"))));
    }
    if(multipart->hasContent(U("canRenameTeamDrive")))
    {
        setCanRenameTeamDrive(ModelBase::boolFromHttpContent(multipart->getContent(U("canRenameTeamDrive"))));
    }
    if(multipart->hasContent(U("canShare")))
    {
        setCanShare(ModelBase::boolFromHttpContent(multipart->getContent(U("canShare"))));
    }
}

bool TeamDrive_capabilities::getCanAddChildren() const
{
    return m_CanAddChildren;
}


void TeamDrive_capabilities::setCanAddChildren(bool value)
{
    m_CanAddChildren = value;
    m_CanAddChildrenIsSet = true;
}
bool TeamDrive_capabilities::canAddChildrenIsSet() const
{
    return m_CanAddChildrenIsSet;
}

void TeamDrive_capabilities::unsetCanAddChildren()
{
    m_CanAddChildrenIsSet = false;
}

bool TeamDrive_capabilities::getCanChangeTeamDriveBackground() const
{
    return m_CanChangeTeamDriveBackground;
}


void TeamDrive_capabilities::setCanChangeTeamDriveBackground(bool value)
{
    m_CanChangeTeamDriveBackground = value;
    m_CanChangeTeamDriveBackgroundIsSet = true;
}
bool TeamDrive_capabilities::canChangeTeamDriveBackgroundIsSet() const
{
    return m_CanChangeTeamDriveBackgroundIsSet;
}

void TeamDrive_capabilities::unsetCanChangeTeamDriveBackground()
{
    m_CanChangeTeamDriveBackgroundIsSet = false;
}

bool TeamDrive_capabilities::getCanComment() const
{
    return m_CanComment;
}


void TeamDrive_capabilities::setCanComment(bool value)
{
    m_CanComment = value;
    m_CanCommentIsSet = true;
}
bool TeamDrive_capabilities::canCommentIsSet() const
{
    return m_CanCommentIsSet;
}

void TeamDrive_capabilities::unsetCanComment()
{
    m_CanCommentIsSet = false;
}

bool TeamDrive_capabilities::getCanCopy() const
{
    return m_CanCopy;
}


void TeamDrive_capabilities::setCanCopy(bool value)
{
    m_CanCopy = value;
    m_CanCopyIsSet = true;
}
bool TeamDrive_capabilities::canCopyIsSet() const
{
    return m_CanCopyIsSet;
}

void TeamDrive_capabilities::unsetCanCopy()
{
    m_CanCopyIsSet = false;
}

bool TeamDrive_capabilities::getCanDeleteTeamDrive() const
{
    return m_CanDeleteTeamDrive;
}


void TeamDrive_capabilities::setCanDeleteTeamDrive(bool value)
{
    m_CanDeleteTeamDrive = value;
    m_CanDeleteTeamDriveIsSet = true;
}
bool TeamDrive_capabilities::canDeleteTeamDriveIsSet() const
{
    return m_CanDeleteTeamDriveIsSet;
}

void TeamDrive_capabilities::unsetCanDeleteTeamDrive()
{
    m_CanDeleteTeamDriveIsSet = false;
}

bool TeamDrive_capabilities::getCanDownload() const
{
    return m_CanDownload;
}


void TeamDrive_capabilities::setCanDownload(bool value)
{
    m_CanDownload = value;
    m_CanDownloadIsSet = true;
}
bool TeamDrive_capabilities::canDownloadIsSet() const
{
    return m_CanDownloadIsSet;
}

void TeamDrive_capabilities::unsetCanDownload()
{
    m_CanDownloadIsSet = false;
}

bool TeamDrive_capabilities::getCanEdit() const
{
    return m_CanEdit;
}


void TeamDrive_capabilities::setCanEdit(bool value)
{
    m_CanEdit = value;
    m_CanEditIsSet = true;
}
bool TeamDrive_capabilities::canEditIsSet() const
{
    return m_CanEditIsSet;
}

void TeamDrive_capabilities::unsetCanEdit()
{
    m_CanEditIsSet = false;
}

bool TeamDrive_capabilities::getCanListChildren() const
{
    return m_CanListChildren;
}


void TeamDrive_capabilities::setCanListChildren(bool value)
{
    m_CanListChildren = value;
    m_CanListChildrenIsSet = true;
}
bool TeamDrive_capabilities::canListChildrenIsSet() const
{
    return m_CanListChildrenIsSet;
}

void TeamDrive_capabilities::unsetCanListChildren()
{
    m_CanListChildrenIsSet = false;
}

bool TeamDrive_capabilities::getCanManageMembers() const
{
    return m_CanManageMembers;
}


void TeamDrive_capabilities::setCanManageMembers(bool value)
{
    m_CanManageMembers = value;
    m_CanManageMembersIsSet = true;
}
bool TeamDrive_capabilities::canManageMembersIsSet() const
{
    return m_CanManageMembersIsSet;
}

void TeamDrive_capabilities::unsetCanManageMembers()
{
    m_CanManageMembersIsSet = false;
}

bool TeamDrive_capabilities::getCanReadRevisions() const
{
    return m_CanReadRevisions;
}


void TeamDrive_capabilities::setCanReadRevisions(bool value)
{
    m_CanReadRevisions = value;
    m_CanReadRevisionsIsSet = true;
}
bool TeamDrive_capabilities::canReadRevisionsIsSet() const
{
    return m_CanReadRevisionsIsSet;
}

void TeamDrive_capabilities::unsetCanReadRevisions()
{
    m_CanReadRevisionsIsSet = false;
}

bool TeamDrive_capabilities::getCanRemoveChildren() const
{
    return m_CanRemoveChildren;
}


void TeamDrive_capabilities::setCanRemoveChildren(bool value)
{
    m_CanRemoveChildren = value;
    m_CanRemoveChildrenIsSet = true;
}
bool TeamDrive_capabilities::canRemoveChildrenIsSet() const
{
    return m_CanRemoveChildrenIsSet;
}

void TeamDrive_capabilities::unsetCanRemoveChildren()
{
    m_CanRemoveChildrenIsSet = false;
}

bool TeamDrive_capabilities::getCanRename() const
{
    return m_CanRename;
}


void TeamDrive_capabilities::setCanRename(bool value)
{
    m_CanRename = value;
    m_CanRenameIsSet = true;
}
bool TeamDrive_capabilities::canRenameIsSet() const
{
    return m_CanRenameIsSet;
}

void TeamDrive_capabilities::unsetCanRename()
{
    m_CanRenameIsSet = false;
}

bool TeamDrive_capabilities::getCanRenameTeamDrive() const
{
    return m_CanRenameTeamDrive;
}


void TeamDrive_capabilities::setCanRenameTeamDrive(bool value)
{
    m_CanRenameTeamDrive = value;
    m_CanRenameTeamDriveIsSet = true;
}
bool TeamDrive_capabilities::canRenameTeamDriveIsSet() const
{
    return m_CanRenameTeamDriveIsSet;
}

void TeamDrive_capabilities::unsetCanRenameTeamDrive()
{
    m_CanRenameTeamDriveIsSet = false;
}

bool TeamDrive_capabilities::getCanShare() const
{
    return m_CanShare;
}


void TeamDrive_capabilities::setCanShare(bool value)
{
    m_CanShare = value;
    m_CanShareIsSet = true;
}
bool TeamDrive_capabilities::canShareIsSet() const
{
    return m_CanShareIsSet;
}

void TeamDrive_capabilities::unsetCanShare()
{
    m_CanShareIsSet = false;
}

}
}
}
}

