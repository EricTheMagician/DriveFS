/**
 * Drive
 * Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "File_contentHints_thumbnail.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

File_contentHints_thumbnail::File_contentHints_thumbnail()
{
//    m_Image = U("");
    m_ImageIsSet = false;
    m_MimeType = U("");
    m_MimeTypeIsSet = false;
}

File_contentHints_thumbnail::~File_contentHints_thumbnail()
{
}

void File_contentHints_thumbnail::validate()
{
    // TODO: implement validation
}

web::json::value File_contentHints_thumbnail::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ImageIsSet)
    {
//        val[U("image")] = ModelBase::toJson(m_Image);
    }
    if(m_MimeTypeIsSet)
    {
        val[U("mimeType")] = ModelBase::toJson(m_MimeType);
    }

    return val;
}

void File_contentHints_thumbnail::fromJson(web::json::value& val)
{
    if(val.has_field(U("image")))
    {
//        setImage(ModelBase::stringFromJson(val[U("image")]));
    }
    if(val.has_field(U("mimeType")))
    {
        setMimeType(ModelBase::stringFromJson(val[U("mimeType")]));
    }
}

void File_contentHints_thumbnail::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_ImageIsSet)
    {
//        multipart->add(ModelBase::toHttpContent(namePrefix + U("image"), m_Image));
        
    }
    if(m_MimeTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("mimeType"), m_MimeType));
        
    }
}

void File_contentHints_thumbnail::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("image")))
    {
//        setImage(ModelBase::stringFromHttpContent(multipart->getContent(U("image"))));
    }
    if(multipart->hasContent(U("mimeType")))
    {
        setMimeType(ModelBase::stringFromHttpContent(multipart->getContent(U("mimeType"))));
    }
}

ByteArray File_contentHints_thumbnail::getImage() const
{
    return m_Image;
}


void File_contentHints_thumbnail::setImage(ByteArray value)
{
    m_Image = value;
    m_ImageIsSet = true;
}
bool File_contentHints_thumbnail::imageIsSet() const
{
    return m_ImageIsSet;
}

void File_contentHints_thumbnail::unsetImage()
{
    m_ImageIsSet = false;
}

utility::string_t File_contentHints_thumbnail::getMimeType() const
{
    return m_MimeType;
}


void File_contentHints_thumbnail::setMimeType(utility::string_t value)
{
    m_MimeType = value;
    m_MimeTypeIsSet = true;
}
bool File_contentHints_thumbnail::mimeTypeIsSet() const
{
    return m_MimeTypeIsSet;
}

void File_contentHints_thumbnail::unsetMimeType()
{
    m_MimeTypeIsSet = false;
}

}
}
}
}

