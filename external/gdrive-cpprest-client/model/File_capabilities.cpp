/**
 * Drive
 * Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "File_capabilities.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

File_capabilities::File_capabilities()
{
    m_CanAddChildren = false;
    m_CanAddChildrenIsSet = false;
    m_CanChangeViewersCanCopyContent = false;
    m_CanChangeViewersCanCopyContentIsSet = false;
    m_CanComment = false;
    m_CanCommentIsSet = false;
    m_CanCopy = false;
    m_CanCopyIsSet = false;
    m_CanDelete = false;
    m_CanDeleteIsSet = false;
    m_CanDownload = false;
    m_CanDownloadIsSet = false;
    m_CanEdit = false;
    m_CanEditIsSet = false;
    m_CanListChildren = false;
    m_CanListChildrenIsSet = false;
    m_CanMoveItemIntoTeamDrive = false;
    m_CanMoveItemIntoTeamDriveIsSet = false;
    m_CanMoveTeamDriveItem = false;
    m_CanMoveTeamDriveItemIsSet = false;
    m_CanReadRevisions = false;
    m_CanReadRevisionsIsSet = false;
    m_CanReadTeamDrive = false;
    m_CanReadTeamDriveIsSet = false;
    m_CanRemoveChildren = false;
    m_CanRemoveChildrenIsSet = false;
    m_CanRename = false;
    m_CanRenameIsSet = false;
    m_CanShare = false;
    m_CanShareIsSet = false;
    m_CanTrash = false;
    m_CanTrashIsSet = false;
    m_CanUntrash = false;
    m_CanUntrashIsSet = false;
}

File_capabilities::~File_capabilities()
{
}

void File_capabilities::validate()
{
    // TODO: implement validation
}

web::json::value File_capabilities::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_CanAddChildrenIsSet)
    {
        val[U("canAddChildren")] = ModelBase::toJson(m_CanAddChildren);
    }
    if(m_CanChangeViewersCanCopyContentIsSet)
    {
        val[U("canChangeViewersCanCopyContent")] = ModelBase::toJson(m_CanChangeViewersCanCopyContent);
    }
    if(m_CanCommentIsSet)
    {
        val[U("canComment")] = ModelBase::toJson(m_CanComment);
    }
    if(m_CanCopyIsSet)
    {
        val[U("canCopy")] = ModelBase::toJson(m_CanCopy);
    }
    if(m_CanDeleteIsSet)
    {
        val[U("canDelete")] = ModelBase::toJson(m_CanDelete);
    }
    if(m_CanDownloadIsSet)
    {
        val[U("canDownload")] = ModelBase::toJson(m_CanDownload);
    }
    if(m_CanEditIsSet)
    {
        val[U("canEdit")] = ModelBase::toJson(m_CanEdit);
    }
    if(m_CanListChildrenIsSet)
    {
        val[U("canListChildren")] = ModelBase::toJson(m_CanListChildren);
    }
    if(m_CanMoveItemIntoTeamDriveIsSet)
    {
        val[U("canMoveItemIntoTeamDrive")] = ModelBase::toJson(m_CanMoveItemIntoTeamDrive);
    }
    if(m_CanMoveTeamDriveItemIsSet)
    {
        val[U("canMoveTeamDriveItem")] = ModelBase::toJson(m_CanMoveTeamDriveItem);
    }
    if(m_CanReadRevisionsIsSet)
    {
        val[U("canReadRevisions")] = ModelBase::toJson(m_CanReadRevisions);
    }
    if(m_CanReadTeamDriveIsSet)
    {
        val[U("canReadTeamDrive")] = ModelBase::toJson(m_CanReadTeamDrive);
    }
    if(m_CanRemoveChildrenIsSet)
    {
        val[U("canRemoveChildren")] = ModelBase::toJson(m_CanRemoveChildren);
    }
    if(m_CanRenameIsSet)
    {
        val[U("canRename")] = ModelBase::toJson(m_CanRename);
    }
    if(m_CanShareIsSet)
    {
        val[U("canShare")] = ModelBase::toJson(m_CanShare);
    }
    if(m_CanTrashIsSet)
    {
        val[U("canTrash")] = ModelBase::toJson(m_CanTrash);
    }
    if(m_CanUntrashIsSet)
    {
        val[U("canUntrash")] = ModelBase::toJson(m_CanUntrash);
    }

    return val;
}

void File_capabilities::fromJson(web::json::value& val)
{
    if(val.has_field(U("canAddChildren")))
    {
        setCanAddChildren(ModelBase::boolFromJson(val[U("canAddChildren")]));
    }
    if(val.has_field(U("canChangeViewersCanCopyContent")))
    {
        setCanChangeViewersCanCopyContent(ModelBase::boolFromJson(val[U("canChangeViewersCanCopyContent")]));
    }
    if(val.has_field(U("canComment")))
    {
        setCanComment(ModelBase::boolFromJson(val[U("canComment")]));
    }
    if(val.has_field(U("canCopy")))
    {
        setCanCopy(ModelBase::boolFromJson(val[U("canCopy")]));
    }
    if(val.has_field(U("canDelete")))
    {
        setCanDelete(ModelBase::boolFromJson(val[U("canDelete")]));
    }
    if(val.has_field(U("canDownload")))
    {
        setCanDownload(ModelBase::boolFromJson(val[U("canDownload")]));
    }
    if(val.has_field(U("canEdit")))
    {
        setCanEdit(ModelBase::boolFromJson(val[U("canEdit")]));
    }
    if(val.has_field(U("canListChildren")))
    {
        setCanListChildren(ModelBase::boolFromJson(val[U("canListChildren")]));
    }
    if(val.has_field(U("canMoveItemIntoTeamDrive")))
    {
        setCanMoveItemIntoTeamDrive(ModelBase::boolFromJson(val[U("canMoveItemIntoTeamDrive")]));
    }
    if(val.has_field(U("canMoveTeamDriveItem")))
    {
        setCanMoveTeamDriveItem(ModelBase::boolFromJson(val[U("canMoveTeamDriveItem")]));
    }
    if(val.has_field(U("canReadRevisions")))
    {
        setCanReadRevisions(ModelBase::boolFromJson(val[U("canReadRevisions")]));
    }
    if(val.has_field(U("canReadTeamDrive")))
    {
        setCanReadTeamDrive(ModelBase::boolFromJson(val[U("canReadTeamDrive")]));
    }
    if(val.has_field(U("canRemoveChildren")))
    {
        setCanRemoveChildren(ModelBase::boolFromJson(val[U("canRemoveChildren")]));
    }
    if(val.has_field(U("canRename")))
    {
        setCanRename(ModelBase::boolFromJson(val[U("canRename")]));
    }
    if(val.has_field(U("canShare")))
    {
        setCanShare(ModelBase::boolFromJson(val[U("canShare")]));
    }
    if(val.has_field(U("canTrash")))
    {
        setCanTrash(ModelBase::boolFromJson(val[U("canTrash")]));
    }
    if(val.has_field(U("canUntrash")))
    {
        setCanUntrash(ModelBase::boolFromJson(val[U("canUntrash")]));
    }
}

void File_capabilities::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_CanAddChildrenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("canAddChildren"), m_CanAddChildren));
    }
    if(m_CanChangeViewersCanCopyContentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("canChangeViewersCanCopyContent"), m_CanChangeViewersCanCopyContent));
    }
    if(m_CanCommentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("canComment"), m_CanComment));
    }
    if(m_CanCopyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("canCopy"), m_CanCopy));
    }
    if(m_CanDeleteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("canDelete"), m_CanDelete));
    }
    if(m_CanDownloadIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("canDownload"), m_CanDownload));
    }
    if(m_CanEditIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("canEdit"), m_CanEdit));
    }
    if(m_CanListChildrenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("canListChildren"), m_CanListChildren));
    }
    if(m_CanMoveItemIntoTeamDriveIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("canMoveItemIntoTeamDrive"), m_CanMoveItemIntoTeamDrive));
    }
    if(m_CanMoveTeamDriveItemIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("canMoveTeamDriveItem"), m_CanMoveTeamDriveItem));
    }
    if(m_CanReadRevisionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("canReadRevisions"), m_CanReadRevisions));
    }
    if(m_CanReadTeamDriveIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("canReadTeamDrive"), m_CanReadTeamDrive));
    }
    if(m_CanRemoveChildrenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("canRemoveChildren"), m_CanRemoveChildren));
    }
    if(m_CanRenameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("canRename"), m_CanRename));
    }
    if(m_CanShareIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("canShare"), m_CanShare));
    }
    if(m_CanTrashIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("canTrash"), m_CanTrash));
    }
    if(m_CanUntrashIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("canUntrash"), m_CanUntrash));
    }
}

void File_capabilities::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("canAddChildren")))
    {
        setCanAddChildren(ModelBase::boolFromHttpContent(multipart->getContent(U("canAddChildren"))));
    }
    if(multipart->hasContent(U("canChangeViewersCanCopyContent")))
    {
        setCanChangeViewersCanCopyContent(ModelBase::boolFromHttpContent(multipart->getContent(U("canChangeViewersCanCopyContent"))));
    }
    if(multipart->hasContent(U("canComment")))
    {
        setCanComment(ModelBase::boolFromHttpContent(multipart->getContent(U("canComment"))));
    }
    if(multipart->hasContent(U("canCopy")))
    {
        setCanCopy(ModelBase::boolFromHttpContent(multipart->getContent(U("canCopy"))));
    }
    if(multipart->hasContent(U("canDelete")))
    {
        setCanDelete(ModelBase::boolFromHttpContent(multipart->getContent(U("canDelete"))));
    }
    if(multipart->hasContent(U("canDownload")))
    {
        setCanDownload(ModelBase::boolFromHttpContent(multipart->getContent(U("canDownload"))));
    }
    if(multipart->hasContent(U("canEdit")))
    {
        setCanEdit(ModelBase::boolFromHttpContent(multipart->getContent(U("canEdit"))));
    }
    if(multipart->hasContent(U("canListChildren")))
    {
        setCanListChildren(ModelBase::boolFromHttpContent(multipart->getContent(U("canListChildren"))));
    }
    if(multipart->hasContent(U("canMoveItemIntoTeamDrive")))
    {
        setCanMoveItemIntoTeamDrive(ModelBase::boolFromHttpContent(multipart->getContent(U("canMoveItemIntoTeamDrive"))));
    }
    if(multipart->hasContent(U("canMoveTeamDriveItem")))
    {
        setCanMoveTeamDriveItem(ModelBase::boolFromHttpContent(multipart->getContent(U("canMoveTeamDriveItem"))));
    }
    if(multipart->hasContent(U("canReadRevisions")))
    {
        setCanReadRevisions(ModelBase::boolFromHttpContent(multipart->getContent(U("canReadRevisions"))));
    }
    if(multipart->hasContent(U("canReadTeamDrive")))
    {
        setCanReadTeamDrive(ModelBase::boolFromHttpContent(multipart->getContent(U("canReadTeamDrive"))));
    }
    if(multipart->hasContent(U("canRemoveChildren")))
    {
        setCanRemoveChildren(ModelBase::boolFromHttpContent(multipart->getContent(U("canRemoveChildren"))));
    }
    if(multipart->hasContent(U("canRename")))
    {
        setCanRename(ModelBase::boolFromHttpContent(multipart->getContent(U("canRename"))));
    }
    if(multipart->hasContent(U("canShare")))
    {
        setCanShare(ModelBase::boolFromHttpContent(multipart->getContent(U("canShare"))));
    }
    if(multipart->hasContent(U("canTrash")))
    {
        setCanTrash(ModelBase::boolFromHttpContent(multipart->getContent(U("canTrash"))));
    }
    if(multipart->hasContent(U("canUntrash")))
    {
        setCanUntrash(ModelBase::boolFromHttpContent(multipart->getContent(U("canUntrash"))));
    }
}

bool File_capabilities::getCanAddChildren() const
{
    return m_CanAddChildren;
}


void File_capabilities::setCanAddChildren(bool value)
{
    m_CanAddChildren = value;
    m_CanAddChildrenIsSet = true;
}
bool File_capabilities::canAddChildrenIsSet() const
{
    return m_CanAddChildrenIsSet;
}

void File_capabilities::unsetCanAddChildren()
{
    m_CanAddChildrenIsSet = false;
}

bool File_capabilities::getCanChangeViewersCanCopyContent() const
{
    return m_CanChangeViewersCanCopyContent;
}


void File_capabilities::setCanChangeViewersCanCopyContent(bool value)
{
    m_CanChangeViewersCanCopyContent = value;
    m_CanChangeViewersCanCopyContentIsSet = true;
}
bool File_capabilities::canChangeViewersCanCopyContentIsSet() const
{
    return m_CanChangeViewersCanCopyContentIsSet;
}

void File_capabilities::unsetCanChangeViewersCanCopyContent()
{
    m_CanChangeViewersCanCopyContentIsSet = false;
}

bool File_capabilities::getCanComment() const
{
    return m_CanComment;
}


void File_capabilities::setCanComment(bool value)
{
    m_CanComment = value;
    m_CanCommentIsSet = true;
}
bool File_capabilities::canCommentIsSet() const
{
    return m_CanCommentIsSet;
}

void File_capabilities::unsetCanComment()
{
    m_CanCommentIsSet = false;
}

bool File_capabilities::getCanCopy() const
{
    return m_CanCopy;
}


void File_capabilities::setCanCopy(bool value)
{
    m_CanCopy = value;
    m_CanCopyIsSet = true;
}
bool File_capabilities::canCopyIsSet() const
{
    return m_CanCopyIsSet;
}

void File_capabilities::unsetCanCopy()
{
    m_CanCopyIsSet = false;
}

bool File_capabilities::getCanDelete() const
{
    return m_CanDelete;
}


void File_capabilities::setCanDelete(bool value)
{
    m_CanDelete = value;
    m_CanDeleteIsSet = true;
}
bool File_capabilities::canDeleteIsSet() const
{
    return m_CanDeleteIsSet;
}

void File_capabilities::unsetCanDelete()
{
    m_CanDeleteIsSet = false;
}

bool File_capabilities::getCanDownload() const
{
    return m_CanDownload;
}


void File_capabilities::setCanDownload(bool value)
{
    m_CanDownload = value;
    m_CanDownloadIsSet = true;
}
bool File_capabilities::canDownloadIsSet() const
{
    return m_CanDownloadIsSet;
}

void File_capabilities::unsetCanDownload()
{
    m_CanDownloadIsSet = false;
}

bool File_capabilities::getCanEdit() const
{
    return m_CanEdit;
}


void File_capabilities::setCanEdit(bool value)
{
    m_CanEdit = value;
    m_CanEditIsSet = true;
}
bool File_capabilities::canEditIsSet() const
{
    return m_CanEditIsSet;
}

void File_capabilities::unsetCanEdit()
{
    m_CanEditIsSet = false;
}

bool File_capabilities::getCanListChildren() const
{
    return m_CanListChildren;
}


void File_capabilities::setCanListChildren(bool value)
{
    m_CanListChildren = value;
    m_CanListChildrenIsSet = true;
}
bool File_capabilities::canListChildrenIsSet() const
{
    return m_CanListChildrenIsSet;
}

void File_capabilities::unsetCanListChildren()
{
    m_CanListChildrenIsSet = false;
}

bool File_capabilities::getCanMoveItemIntoTeamDrive() const
{
    return m_CanMoveItemIntoTeamDrive;
}


void File_capabilities::setCanMoveItemIntoTeamDrive(bool value)
{
    m_CanMoveItemIntoTeamDrive = value;
    m_CanMoveItemIntoTeamDriveIsSet = true;
}
bool File_capabilities::canMoveItemIntoTeamDriveIsSet() const
{
    return m_CanMoveItemIntoTeamDriveIsSet;
}

void File_capabilities::unsetCanMoveItemIntoTeamDrive()
{
    m_CanMoveItemIntoTeamDriveIsSet = false;
}

bool File_capabilities::getCanMoveTeamDriveItem() const
{
    return m_CanMoveTeamDriveItem;
}


void File_capabilities::setCanMoveTeamDriveItem(bool value)
{
    m_CanMoveTeamDriveItem = value;
    m_CanMoveTeamDriveItemIsSet = true;
}
bool File_capabilities::canMoveTeamDriveItemIsSet() const
{
    return m_CanMoveTeamDriveItemIsSet;
}

void File_capabilities::unsetCanMoveTeamDriveItem()
{
    m_CanMoveTeamDriveItemIsSet = false;
}

bool File_capabilities::getCanReadRevisions() const
{
    return m_CanReadRevisions;
}


void File_capabilities::setCanReadRevisions(bool value)
{
    m_CanReadRevisions = value;
    m_CanReadRevisionsIsSet = true;
}
bool File_capabilities::canReadRevisionsIsSet() const
{
    return m_CanReadRevisionsIsSet;
}

void File_capabilities::unsetCanReadRevisions()
{
    m_CanReadRevisionsIsSet = false;
}

bool File_capabilities::getCanReadTeamDrive() const
{
    return m_CanReadTeamDrive;
}


void File_capabilities::setCanReadTeamDrive(bool value)
{
    m_CanReadTeamDrive = value;
    m_CanReadTeamDriveIsSet = true;
}
bool File_capabilities::canReadTeamDriveIsSet() const
{
    return m_CanReadTeamDriveIsSet;
}

void File_capabilities::unsetCanReadTeamDrive()
{
    m_CanReadTeamDriveIsSet = false;
}

bool File_capabilities::getCanRemoveChildren() const
{
    return m_CanRemoveChildren;
}


void File_capabilities::setCanRemoveChildren(bool value)
{
    m_CanRemoveChildren = value;
    m_CanRemoveChildrenIsSet = true;
}
bool File_capabilities::canRemoveChildrenIsSet() const
{
    return m_CanRemoveChildrenIsSet;
}

void File_capabilities::unsetCanRemoveChildren()
{
    m_CanRemoveChildrenIsSet = false;
}

bool File_capabilities::getCanRename() const
{
    return m_CanRename;
}


void File_capabilities::setCanRename(bool value)
{
    m_CanRename = value;
    m_CanRenameIsSet = true;
}
bool File_capabilities::canRenameIsSet() const
{
    return m_CanRenameIsSet;
}

void File_capabilities::unsetCanRename()
{
    m_CanRenameIsSet = false;
}

bool File_capabilities::getCanShare() const
{
    return m_CanShare;
}


void File_capabilities::setCanShare(bool value)
{
    m_CanShare = value;
    m_CanShareIsSet = true;
}
bool File_capabilities::canShareIsSet() const
{
    return m_CanShareIsSet;
}

void File_capabilities::unsetCanShare()
{
    m_CanShareIsSet = false;
}

bool File_capabilities::getCanTrash() const
{
    return m_CanTrash;
}


void File_capabilities::setCanTrash(bool value)
{
    m_CanTrash = value;
    m_CanTrashIsSet = true;
}
bool File_capabilities::canTrashIsSet() const
{
    return m_CanTrashIsSet;
}

void File_capabilities::unsetCanTrash()
{
    m_CanTrashIsSet = false;
}

bool File_capabilities::getCanUntrash() const
{
    return m_CanUntrash;
}


void File_capabilities::setCanUntrash(bool value)
{
    m_CanUntrash = value;
    m_CanUntrashIsSet = true;
}
bool File_capabilities::canUntrashIsSet() const
{
    return m_CanUntrashIsSet;
}

void File_capabilities::unsetCanUntrash()
{
    m_CanUntrashIsSet = false;
}

}
}
}
}

