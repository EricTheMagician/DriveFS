/**
 * Drive
 * Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "User.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

User::User()
{
    m_DisplayName = U("");
    m_DisplayNameIsSet = false;
    m_EmailAddress = U("");
    m_EmailAddressIsSet = false;
    m_Kind = U("");
    m_KindIsSet = false;
    m_Me = false;
    m_MeIsSet = false;
    m_PermissionId = U("");
    m_PermissionIdIsSet = false;
    m_PhotoLink = U("");
    m_PhotoLinkIsSet = false;
}

User::~User()
{
}

void User::validate()
{
    // TODO: implement validation
}

web::json::value User::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_DisplayNameIsSet)
    {
        val[U("displayName")] = ModelBase::toJson(m_DisplayName);
    }
    if(m_EmailAddressIsSet)
    {
        val[U("emailAddress")] = ModelBase::toJson(m_EmailAddress);
    }
    if(m_KindIsSet)
    {
        val[U("kind")] = ModelBase::toJson(m_Kind);
    }
    if(m_MeIsSet)
    {
        val[U("me")] = ModelBase::toJson(m_Me);
    }
    if(m_PermissionIdIsSet)
    {
        val[U("permissionId")] = ModelBase::toJson(m_PermissionId);
    }
    if(m_PhotoLinkIsSet)
    {
        val[U("photoLink")] = ModelBase::toJson(m_PhotoLink);
    }

    return val;
}

void User::fromJson(web::json::value& val)
{
    if(val.has_field(U("displayName")))
    {
        setDisplayName(ModelBase::stringFromJson(val[U("displayName")]));
    }
    if(val.has_field(U("emailAddress")))
    {
        setEmailAddress(ModelBase::stringFromJson(val[U("emailAddress")]));
    }
    if(val.has_field(U("kind")))
    {
        setKind(ModelBase::stringFromJson(val[U("kind")]));
    }
    if(val.has_field(U("me")))
    {
        setMe(ModelBase::boolFromJson(val[U("me")]));
    }
    if(val.has_field(U("permissionId")))
    {
        setPermissionId(ModelBase::stringFromJson(val[U("permissionId")]));
    }
    if(val.has_field(U("photoLink")))
    {
        setPhotoLink(ModelBase::stringFromJson(val[U("photoLink")]));
    }
}

void User::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_DisplayNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("displayName"), m_DisplayName));
        
    }
    if(m_EmailAddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("emailAddress"), m_EmailAddress));
        
    }
    if(m_KindIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("kind"), m_Kind));
        
    }
    if(m_MeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("me"), m_Me));
    }
    if(m_PermissionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("permissionId"), m_PermissionId));
        
    }
    if(m_PhotoLinkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("photoLink"), m_PhotoLink));
        
    }
}

void User::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("displayName")))
    {
        setDisplayName(ModelBase::stringFromHttpContent(multipart->getContent(U("displayName"))));
    }
    if(multipart->hasContent(U("emailAddress")))
    {
        setEmailAddress(ModelBase::stringFromHttpContent(multipart->getContent(U("emailAddress"))));
    }
    if(multipart->hasContent(U("kind")))
    {
        setKind(ModelBase::stringFromHttpContent(multipart->getContent(U("kind"))));
    }
    if(multipart->hasContent(U("me")))
    {
        setMe(ModelBase::boolFromHttpContent(multipart->getContent(U("me"))));
    }
    if(multipart->hasContent(U("permissionId")))
    {
        setPermissionId(ModelBase::stringFromHttpContent(multipart->getContent(U("permissionId"))));
    }
    if(multipart->hasContent(U("photoLink")))
    {
        setPhotoLink(ModelBase::stringFromHttpContent(multipart->getContent(U("photoLink"))));
    }
}

utility::string_t User::getDisplayName() const
{
    return m_DisplayName;
}


void User::setDisplayName(utility::string_t value)
{
    m_DisplayName = value;
    m_DisplayNameIsSet = true;
}
bool User::displayNameIsSet() const
{
    return m_DisplayNameIsSet;
}

void User::unsetDisplayName()
{
    m_DisplayNameIsSet = false;
}

utility::string_t User::getEmailAddress() const
{
    return m_EmailAddress;
}


void User::setEmailAddress(utility::string_t value)
{
    m_EmailAddress = value;
    m_EmailAddressIsSet = true;
}
bool User::emailAddressIsSet() const
{
    return m_EmailAddressIsSet;
}

void User::unsetEmailAddress()
{
    m_EmailAddressIsSet = false;
}

utility::string_t User::getKind() const
{
    return m_Kind;
}


void User::setKind(utility::string_t value)
{
    m_Kind = value;
    m_KindIsSet = true;
}
bool User::kindIsSet() const
{
    return m_KindIsSet;
}

void User::unsetKind()
{
    m_KindIsSet = false;
}

bool User::getMe() const
{
    return m_Me;
}


void User::setMe(bool value)
{
    m_Me = value;
    m_MeIsSet = true;
}
bool User::meIsSet() const
{
    return m_MeIsSet;
}

void User::unsetMe()
{
    m_MeIsSet = false;
}

utility::string_t User::getPermissionId() const
{
    return m_PermissionId;
}


void User::setPermissionId(utility::string_t value)
{
    m_PermissionId = value;
    m_PermissionIdIsSet = true;
}
bool User::permissionIdIsSet() const
{
    return m_PermissionIdIsSet;
}

void User::unsetPermissionId()
{
    m_PermissionIdIsSet = false;
}

utility::string_t User::getPhotoLink() const
{
    return m_PhotoLink;
}


void User::setPhotoLink(utility::string_t value)
{
    m_PhotoLink = value;
    m_PhotoLinkIsSet = true;
}
bool User::photoLinkIsSet() const
{
    return m_PhotoLinkIsSet;
}

void User::unsetPhotoLink()
{
    m_PhotoLinkIsSet = false;
}

}
}
}
}

