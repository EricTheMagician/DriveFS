/**
 * Drive
 * Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "About_storageQuota.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

About_storageQuota::About_storageQuota()
{
    m_Limit = U("");
    m_LimitIsSet = false;
    m_Usage = U("");
    m_UsageIsSet = false;
    m_UsageInDrive = U("");
    m_UsageInDriveIsSet = false;
    m_UsageInDriveTrash = U("");
    m_UsageInDriveTrashIsSet = false;
}

About_storageQuota::~About_storageQuota()
{
}

void About_storageQuota::validate()
{
    // TODO: implement validation
}

web::json::value About_storageQuota::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_LimitIsSet)
    {
        val[U("limit")] = ModelBase::toJson(m_Limit);
    }
    if(m_UsageIsSet)
    {
        val[U("usage")] = ModelBase::toJson(m_Usage);
    }
    if(m_UsageInDriveIsSet)
    {
        val[U("usageInDrive")] = ModelBase::toJson(m_UsageInDrive);
    }
    if(m_UsageInDriveTrashIsSet)
    {
        val[U("usageInDriveTrash")] = ModelBase::toJson(m_UsageInDriveTrash);
    }

    return val;
}

void About_storageQuota::fromJson(web::json::value& val)
{
    if(val.has_field(U("limit")))
    {
        setLimit(ModelBase::stringFromJson(val[U("limit")]));
    }
    if(val.has_field(U("usage")))
    {
        setUsage(ModelBase::stringFromJson(val[U("usage")]));
    }
    if(val.has_field(U("usageInDrive")))
    {
        setUsageInDrive(ModelBase::stringFromJson(val[U("usageInDrive")]));
    }
    if(val.has_field(U("usageInDriveTrash")))
    {
        setUsageInDriveTrash(ModelBase::stringFromJson(val[U("usageInDriveTrash")]));
    }
}

void About_storageQuota::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_LimitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("limit"), m_Limit));
        
    }
    if(m_UsageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("usage"), m_Usage));
        
    }
    if(m_UsageInDriveIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("usageInDrive"), m_UsageInDrive));
        
    }
    if(m_UsageInDriveTrashIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("usageInDriveTrash"), m_UsageInDriveTrash));
        
    }
}

void About_storageQuota::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("limit")))
    {
        setLimit(ModelBase::stringFromHttpContent(multipart->getContent(U("limit"))));
    }
    if(multipart->hasContent(U("usage")))
    {
        setUsage(ModelBase::stringFromHttpContent(multipart->getContent(U("usage"))));
    }
    if(multipart->hasContent(U("usageInDrive")))
    {
        setUsageInDrive(ModelBase::stringFromHttpContent(multipart->getContent(U("usageInDrive"))));
    }
    if(multipart->hasContent(U("usageInDriveTrash")))
    {
        setUsageInDriveTrash(ModelBase::stringFromHttpContent(multipart->getContent(U("usageInDriveTrash"))));
    }
}

utility::string_t About_storageQuota::getLimit() const
{
    return m_Limit;
}


void About_storageQuota::setLimit(utility::string_t value)
{
    m_Limit = value;
    m_LimitIsSet = true;
}
bool About_storageQuota::limitIsSet() const
{
    return m_LimitIsSet;
}

void About_storageQuota::unsetLimit()
{
    m_LimitIsSet = false;
}

utility::string_t About_storageQuota::getUsage() const
{
    return m_Usage;
}


void About_storageQuota::setUsage(utility::string_t value)
{
    m_Usage = value;
    m_UsageIsSet = true;
}
bool About_storageQuota::usageIsSet() const
{
    return m_UsageIsSet;
}

void About_storageQuota::unsetUsage()
{
    m_UsageIsSet = false;
}

utility::string_t About_storageQuota::getUsageInDrive() const
{
    return m_UsageInDrive;
}


void About_storageQuota::setUsageInDrive(utility::string_t value)
{
    m_UsageInDrive = value;
    m_UsageInDriveIsSet = true;
}
bool About_storageQuota::usageInDriveIsSet() const
{
    return m_UsageInDriveIsSet;
}

void About_storageQuota::unsetUsageInDrive()
{
    m_UsageInDriveIsSet = false;
}

utility::string_t About_storageQuota::getUsageInDriveTrash() const
{
    return m_UsageInDriveTrash;
}


void About_storageQuota::setUsageInDriveTrash(utility::string_t value)
{
    m_UsageInDriveTrash = value;
    m_UsageInDriveTrashIsSet = true;
}
bool About_storageQuota::usageInDriveTrashIsSet() const
{
    return m_UsageInDriveTrashIsSet;
}

void About_storageQuota::unsetUsageInDriveTrash()
{
    m_UsageInDriveTrashIsSet = false;
}

}
}
}
}

