/**
 * Drive
 * Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "CommentList.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

CommentList::CommentList()
{
    m_CommentsIsSet = false;
    m_Kind = U("");
    m_KindIsSet = false;
    m_NextPageToken = U("");
    m_NextPageTokenIsSet = false;
}

CommentList::~CommentList()
{
}

void CommentList::validate()
{
    // TODO: implement validation
}

web::json::value CommentList::toJson() const
{
    web::json::value val = web::json::value::object();

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Comments )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("comments")] = web::json::value::array(jsonArray);
        }
    }
    if(m_KindIsSet)
    {
        val[U("kind")] = ModelBase::toJson(m_Kind);
    }
    if(m_NextPageTokenIsSet)
    {
        val[U("nextPageToken")] = ModelBase::toJson(m_NextPageToken);
    }

    return val;
}

void CommentList::fromJson(web::json::value& val)
{
    {
        m_Comments.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("comments")))
        {
        for( auto& item : val[U("comments")].as_array() )
        {
            if(item.is_null())
            {
                m_Comments.push_back( std::shared_ptr<Comment>(nullptr) );
            }
            else
            {
                std::shared_ptr<Comment> newItem(new Comment());
                newItem->fromJson(item);
                m_Comments.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(U("kind")))
    {
        setKind(ModelBase::stringFromJson(val[U("kind")]));
    }
    if(val.has_field(U("nextPageToken")))
    {
        setNextPageToken(ModelBase::stringFromJson(val[U("nextPageToken")]));
    }
}

void CommentList::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Comments )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("comments"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_KindIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("kind"), m_Kind));
        
    }
    if(m_NextPageTokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("nextPageToken"), m_NextPageToken));
        
    }
}

void CommentList::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        m_Comments.clear();
        if(multipart->hasContent(U("comments")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("comments"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Comments.push_back( std::shared_ptr<Comment>(nullptr) );
            }
            else
            {
                std::shared_ptr<Comment> newItem(new Comment());
                newItem->fromJson(item);
                m_Comments.push_back( newItem );
            }
        }
        }
    }
    if(multipart->hasContent(U("kind")))
    {
        setKind(ModelBase::stringFromHttpContent(multipart->getContent(U("kind"))));
    }
    if(multipart->hasContent(U("nextPageToken")))
    {
        setNextPageToken(ModelBase::stringFromHttpContent(multipart->getContent(U("nextPageToken"))));
    }
}

std::vector<std::shared_ptr<Comment>>& CommentList::getComments()
{
    return m_Comments;
}

void CommentList::setComments(std::vector<std::shared_ptr<Comment>> value)
{
    m_Comments = value;
    m_CommentsIsSet = true;
}
bool CommentList::commentsIsSet() const
{
    return m_CommentsIsSet;
}

void CommentList::unsetComments()
{
    m_CommentsIsSet = false;
}

utility::string_t CommentList::getKind() const
{
    return m_Kind;
}


void CommentList::setKind(utility::string_t value)
{
    m_Kind = value;
    m_KindIsSet = true;
}
bool CommentList::kindIsSet() const
{
    return m_KindIsSet;
}

void CommentList::unsetKind()
{
    m_KindIsSet = false;
}

utility::string_t CommentList::getNextPageToken() const
{
    return m_NextPageToken;
}


void CommentList::setNextPageToken(utility::string_t value)
{
    m_NextPageToken = value;
    m_NextPageTokenIsSet = true;
}
bool CommentList::nextPageTokenIsSet() const
{
    return m_NextPageTokenIsSet;
}

void CommentList::unsetNextPageToken()
{
    m_NextPageTokenIsSet = false;
}

}
}
}
}

