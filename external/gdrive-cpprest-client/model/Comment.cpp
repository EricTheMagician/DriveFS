/**
 * Drive
 * Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Comment.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Comment::Comment()
{
    m_Anchor = U("");
    m_AnchorIsSet = false;
    m_AuthorIsSet = false;
    m_Content = U("");
    m_ContentIsSet = false;
    m_CreatedTime = utility::datetime();
    m_CreatedTimeIsSet = false;
    m_Deleted = false;
    m_DeletedIsSet = false;
    m_HtmlContent = U("");
    m_HtmlContentIsSet = false;
    m_Id = U("");
    m_IdIsSet = false;
    m_Kind = U("");
    m_KindIsSet = false;
    m_ModifiedTime = utility::datetime();
    m_ModifiedTimeIsSet = false;
    m_QuotedFileContentIsSet = false;
    m_RepliesIsSet = false;
    m_Resolved = false;
    m_ResolvedIsSet = false;
}

Comment::~Comment()
{
}

void Comment::validate()
{
    // TODO: implement validation
}

web::json::value Comment::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_AnchorIsSet)
    {
        val[U("anchor")] = ModelBase::toJson(m_Anchor);
    }
    if(m_AuthorIsSet)
    {
        val[U("author")] = ModelBase::toJson(m_Author);
    }
    if(m_ContentIsSet)
    {
        val[U("content")] = ModelBase::toJson(m_Content);
    }
    if(m_CreatedTimeIsSet)
    {
        val[U("createdTime")] = ModelBase::toJson(m_CreatedTime);
    }
    if(m_DeletedIsSet)
    {
        val[U("deleted")] = ModelBase::toJson(m_Deleted);
    }
    if(m_HtmlContentIsSet)
    {
        val[U("htmlContent")] = ModelBase::toJson(m_HtmlContent);
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    if(m_KindIsSet)
    {
        val[U("kind")] = ModelBase::toJson(m_Kind);
    }
    if(m_ModifiedTimeIsSet)
    {
        val[U("modifiedTime")] = ModelBase::toJson(m_ModifiedTime);
    }
    if(m_QuotedFileContentIsSet)
    {
        val[U("quotedFileContent")] = ModelBase::toJson(m_QuotedFileContent);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Replies )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("replies")] = web::json::value::array(jsonArray);
        }
    }
    if(m_ResolvedIsSet)
    {
        val[U("resolved")] = ModelBase::toJson(m_Resolved);
    }

    return val;
}

void Comment::fromJson(web::json::value& val)
{
    if(val.has_field(U("anchor")))
    {
        setAnchor(ModelBase::stringFromJson(val[U("anchor")]));
    }
    if(val.has_field(U("author")))
    {
        if(!val[U("author")].is_null())
        {
            std::shared_ptr<User> newItem(new User());
            newItem->fromJson(val[U("author")]);
            setAuthor( newItem );
        }
    }
    if(val.has_field(U("content")))
    {
        setContent(ModelBase::stringFromJson(val[U("content")]));
    }
    if(val.has_field(U("createdTime")))
    {
        setCreatedTime(ModelBase::dateFromJson(val[U("createdTime")]));
    }
    if(val.has_field(U("deleted")))
    {
        setDeleted(ModelBase::boolFromJson(val[U("deleted")]));
    }
    if(val.has_field(U("htmlContent")))
    {
        setHtmlContent(ModelBase::stringFromJson(val[U("htmlContent")]));
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::stringFromJson(val[U("id")]));
    }
    if(val.has_field(U("kind")))
    {
        setKind(ModelBase::stringFromJson(val[U("kind")]));
    }
    if(val.has_field(U("modifiedTime")))
    {
        setModifiedTime(ModelBase::dateFromJson(val[U("modifiedTime")]));
    }
    if(val.has_field(U("quotedFileContent")))
    {
        if(!val[U("quotedFileContent")].is_null())
        {
            std::shared_ptr<Comment_quotedFileContent> newItem(new Comment_quotedFileContent());
            newItem->fromJson(val[U("quotedFileContent")]);
            setQuotedFileContent( newItem );
        }
    }
    {
        m_Replies.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("replies")))
        {
        for( auto& item : val[U("replies")].as_array() )
        {
            if(item.is_null())
            {
                m_Replies.push_back( std::shared_ptr<Reply>(nullptr) );
            }
            else
            {
                std::shared_ptr<Reply> newItem(new Reply());
                newItem->fromJson(item);
                m_Replies.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(U("resolved")))
    {
        setResolved(ModelBase::boolFromJson(val[U("resolved")]));
    }
}

void Comment::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_AnchorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("anchor"), m_Anchor));
        
    }
    if(m_AuthorIsSet)
    {
        if (m_Author.get())
        {
            m_Author->toMultipart(multipart, U("author."));
        }
        
    }
    if(m_ContentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("content"), m_Content));
        
    }
    if(m_CreatedTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("createdTime"), m_CreatedTime));
        
    }
    if(m_DeletedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("deleted"), m_Deleted));
    }
    if(m_HtmlContentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("htmlContent"), m_HtmlContent));
        
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
        
    }
    if(m_KindIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("kind"), m_Kind));
        
    }
    if(m_ModifiedTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("modifiedTime"), m_ModifiedTime));
        
    }
    if(m_QuotedFileContentIsSet)
    {
        if (m_QuotedFileContent.get())
        {
            m_QuotedFileContent->toMultipart(multipart, U("quotedFileContent."));
        }
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Replies )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("replies"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_ResolvedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("resolved"), m_Resolved));
    }
}

void Comment::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("anchor")))
    {
        setAnchor(ModelBase::stringFromHttpContent(multipart->getContent(U("anchor"))));
    }
    if(multipart->hasContent(U("author")))
    {
        if(multipart->hasContent(U("author")))
        {
            std::shared_ptr<User> newItem(new User());
            newItem->fromMultiPart(multipart, U("author."));
            setAuthor( newItem );
        }
    }
    if(multipart->hasContent(U("content")))
    {
        setContent(ModelBase::stringFromHttpContent(multipart->getContent(U("content"))));
    }
    if(multipart->hasContent(U("createdTime")))
    {
        setCreatedTime(ModelBase::dateFromHttpContent(multipart->getContent(U("createdTime"))));
    }
    if(multipart->hasContent(U("deleted")))
    {
        setDeleted(ModelBase::boolFromHttpContent(multipart->getContent(U("deleted"))));
    }
    if(multipart->hasContent(U("htmlContent")))
    {
        setHtmlContent(ModelBase::stringFromHttpContent(multipart->getContent(U("htmlContent"))));
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::stringFromHttpContent(multipart->getContent(U("id"))));
    }
    if(multipart->hasContent(U("kind")))
    {
        setKind(ModelBase::stringFromHttpContent(multipart->getContent(U("kind"))));
    }
    if(multipart->hasContent(U("modifiedTime")))
    {
        setModifiedTime(ModelBase::dateFromHttpContent(multipart->getContent(U("modifiedTime"))));
    }
    if(multipart->hasContent(U("quotedFileContent")))
    {
        if(multipart->hasContent(U("quotedFileContent")))
        {
            std::shared_ptr<Comment_quotedFileContent> newItem(new Comment_quotedFileContent());
            newItem->fromMultiPart(multipart, U("quotedFileContent."));
            setQuotedFileContent( newItem );
        }
    }
    {
        m_Replies.clear();
        if(multipart->hasContent(U("replies")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("replies"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Replies.push_back( std::shared_ptr<Reply>(nullptr) );
            }
            else
            {
                std::shared_ptr<Reply> newItem(new Reply());
                newItem->fromJson(item);
                m_Replies.push_back( newItem );
            }
        }
        }
    }
    if(multipart->hasContent(U("resolved")))
    {
        setResolved(ModelBase::boolFromHttpContent(multipart->getContent(U("resolved"))));
    }
}

utility::string_t Comment::getAnchor() const
{
    return m_Anchor;
}


void Comment::setAnchor(utility::string_t value)
{
    m_Anchor = value;
    m_AnchorIsSet = true;
}
bool Comment::anchorIsSet() const
{
    return m_AnchorIsSet;
}

void Comment::unsetAnchor()
{
    m_AnchorIsSet = false;
}

std::shared_ptr<User> Comment::getAuthor() const
{
    return m_Author;
}


void Comment::setAuthor(std::shared_ptr<User> value)
{
    m_Author = value;
    m_AuthorIsSet = true;
}
bool Comment::authorIsSet() const
{
    return m_AuthorIsSet;
}

void Comment::unsetAuthor()
{
    m_AuthorIsSet = false;
}

utility::string_t Comment::getContent() const
{
    return m_Content;
}


void Comment::setContent(utility::string_t value)
{
    m_Content = value;
    m_ContentIsSet = true;
}
bool Comment::contentIsSet() const
{
    return m_ContentIsSet;
}

void Comment::unsetContent()
{
    m_ContentIsSet = false;
}

utility::datetime Comment::getCreatedTime() const
{
    return m_CreatedTime;
}


void Comment::setCreatedTime(utility::datetime value)
{
    m_CreatedTime = value;
    m_CreatedTimeIsSet = true;
}
bool Comment::createdTimeIsSet() const
{
    return m_CreatedTimeIsSet;
}

void Comment::unsetCreatedTime()
{
    m_CreatedTimeIsSet = false;
}

bool Comment::getDeleted() const
{
    return m_Deleted;
}


void Comment::setDeleted(bool value)
{
    m_Deleted = value;
    m_DeletedIsSet = true;
}
bool Comment::deletedIsSet() const
{
    return m_DeletedIsSet;
}

void Comment::unsetDeleted()
{
    m_DeletedIsSet = false;
}

utility::string_t Comment::getHtmlContent() const
{
    return m_HtmlContent;
}


void Comment::setHtmlContent(utility::string_t value)
{
    m_HtmlContent = value;
    m_HtmlContentIsSet = true;
}
bool Comment::htmlContentIsSet() const
{
    return m_HtmlContentIsSet;
}

void Comment::unsetHtmlContent()
{
    m_HtmlContentIsSet = false;
}

utility::string_t Comment::getId() const
{
    return m_Id;
}


void Comment::setId(utility::string_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool Comment::idIsSet() const
{
    return m_IdIsSet;
}

void Comment::unsetId()
{
    m_IdIsSet = false;
}

utility::string_t Comment::getKind() const
{
    return m_Kind;
}


void Comment::setKind(utility::string_t value)
{
    m_Kind = value;
    m_KindIsSet = true;
}
bool Comment::kindIsSet() const
{
    return m_KindIsSet;
}

void Comment::unsetKind()
{
    m_KindIsSet = false;
}

utility::datetime Comment::getModifiedTime() const
{
    return m_ModifiedTime;
}


void Comment::setModifiedTime(utility::datetime value)
{
    m_ModifiedTime = value;
    m_ModifiedTimeIsSet = true;
}
bool Comment::modifiedTimeIsSet() const
{
    return m_ModifiedTimeIsSet;
}

void Comment::unsetModifiedTime()
{
    m_ModifiedTimeIsSet = false;
}

std::shared_ptr<Comment_quotedFileContent> Comment::getQuotedFileContent() const
{
    return m_QuotedFileContent;
}


void Comment::setQuotedFileContent(std::shared_ptr<Comment_quotedFileContent> value)
{
    m_QuotedFileContent = value;
    m_QuotedFileContentIsSet = true;
}
bool Comment::quotedFileContentIsSet() const
{
    return m_QuotedFileContentIsSet;
}

void Comment::unsetQuotedFileContent()
{
    m_QuotedFileContentIsSet = false;
}

std::vector<std::shared_ptr<Reply>>& Comment::getReplies()
{
    return m_Replies;
}

void Comment::setReplies(std::vector<std::shared_ptr<Reply>> value)
{
    m_Replies = value;
    m_RepliesIsSet = true;
}
bool Comment::repliesIsSet() const
{
    return m_RepliesIsSet;
}

void Comment::unsetReplies()
{
    m_RepliesIsSet = false;
}

bool Comment::getResolved() const
{
    return m_Resolved;
}


void Comment::setResolved(bool value)
{
    m_Resolved = value;
    m_ResolvedIsSet = true;
}
bool Comment::resolvedIsSet() const
{
    return m_ResolvedIsSet;
}

void Comment::unsetResolved()
{
    m_ResolvedIsSet = false;
}

}
}
}
}

