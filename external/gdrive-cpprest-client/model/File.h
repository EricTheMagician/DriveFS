/**
 * Drive
 * Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * File.h
 *
 * The metadata for a file.
 */

#ifndef File_H_
#define File_H_


#include "ModelBase.h"

#include "File_capabilities.h"
#include "File_videoMediaMetadata.h"
#include "File_contentHints.h"
#include <cpprest/details/basic_types.h>
#include <map>
#include "File_imageMediaMetadata.h"
#include <vector>
#include "Permission.h"
#include "User.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// The metadata for a file.
/// </summary>
class  File
    : public ModelBase
{
public:
    File();
    virtual ~File();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// File members

    /// <summary>
    /// A collection of arbitrary key-value pairs which are private to the requesting app. Entries with null values are cleared in update and copy requests.
    /// </summary>
    std::map<utility::string_t, utility::string_t>& getAppProperties();
    bool appPropertiesIsSet() const;
    void unsetAppProperties();
    void setAppProperties(std::map<utility::string_t, utility::string_t> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<File_capabilities> getCapabilities() const;
    bool capabilitiesIsSet() const;
    void unsetCapabilities();
    void setCapabilities(std::shared_ptr<File_capabilities> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<File_contentHints> getContentHints() const;
    bool contentHintsIsSet() const;
    void unsetContentHints();
    void setContentHints(std::shared_ptr<File_contentHints> value);
    /// <summary>
    /// The time at which the file was created (RFC 3339 date-time).
    /// </summary>
    utility::datetime getCreatedTime() const;
    bool createdTimeIsSet() const;
    void unsetCreatedTime();
    void setCreatedTime(utility::datetime value);
    /// <summary>
    /// A short description of the file.
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();
    void setDescription(utility::string_t value);
    /// <summary>
    /// Whether the file has been explicitly trashed, as opposed to recursively trashed from a parent folder.
    /// </summary>
    bool getExplicitlyTrashed() const;
    bool explicitlyTrashedIsSet() const;
    void unsetExplicitlyTrashed();
    void setExplicitlyTrashed(bool value);
    /// <summary>
    /// The final component of fullFileExtension. This is only available for files with binary content in Drive.
    /// </summary>
    utility::string_t getFileExtension() const;
    bool fileExtensionIsSet() const;
    void unsetFileExtension();
    void setFileExtension(utility::string_t value);
    /// <summary>
    /// The color for a folder as an RGB hex string. The supported colors are published in the folderColorPalette field of the About resource. If an unsupported color is specified, the closest color in the palette will be used instead.
    /// </summary>
    utility::string_t getFolderColorRgb() const;
    bool folderColorRgbIsSet() const;
    void unsetFolderColorRgb();
    void setFolderColorRgb(utility::string_t value);
    /// <summary>
    /// The full file extension extracted from the name field. May contain multiple concatenated extensions, such as \&quot;tar.gz\&quot;. This is only available for files with binary content in Drive. This is automatically updated when the name field changes, however it is not cleared if the new name does not contain a valid extension.
    /// </summary>
    utility::string_t getFullFileExtension() const;
    bool fullFileExtensionIsSet() const;
    void unsetFullFileExtension();
    void setFullFileExtension(utility::string_t value);
    /// <summary>
    /// Whether any users are granted file access directly on this file. This field is only populated for Team Drive files.
    /// </summary>
    bool getHasAugmentedPermissions() const;
    bool hasAugmentedPermissionsIsSet() const;
    void unsetHasAugmentedPermissions();
    void setHasAugmentedPermissions(bool value);
    /// <summary>
    /// Whether this file has a thumbnail. This does not indicate whether the requesting app has access to the thumbnail. To check access, look for the presence of the thumbnailLink field.
    /// </summary>
    bool getHasThumbnail() const;
    bool hasThumbnailIsSet() const;
    void unsetHasThumbnail();
    void setHasThumbnail(bool value);
    /// <summary>
    /// The ID of the file&#39;s head revision. This is currently only available for files with binary content in Drive.
    /// </summary>
    utility::string_t getHeadRevisionId() const;
    bool headRevisionIdIsSet() const;
    void unsetHeadRevisionId();
    void setHeadRevisionId(utility::string_t value);
    /// <summary>
    /// A static, unauthenticated link to the file&#39;s icon.
    /// </summary>
    utility::string_t getIconLink() const;
    bool iconLinkIsSet() const;
    void unsetIconLink();
    void setIconLink(utility::string_t value);
    /// <summary>
    /// The ID of the file.
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();
    void setId(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<File_imageMediaMetadata> getImageMediaMetadata() const;
    bool imageMediaMetadataIsSet() const;
    void unsetImageMediaMetadata();
    void setImageMediaMetadata(std::shared_ptr<File_imageMediaMetadata> value);
    /// <summary>
    /// Whether the file was created or opened by the requesting app.
    /// </summary>
    bool getIsAppAuthorized() const;
    bool isAppAuthorizedIsSet() const;
    void unsetIsAppAuthorized();
    void setIsAppAuthorized(bool value);
    /// <summary>
    /// Identifies what kind of resource this is. Value: the fixed string \&quot;drive#file\&quot;.
    /// </summary>
    utility::string_t getKind() const;
    bool kindIsSet() const;
    void unsetKind();
    void setKind(utility::string_t value);
    /// <summary>
    /// The last user to modify the file.
    /// </summary>
    std::shared_ptr<User> getLastModifyingUser() const;
    bool lastModifyingUserIsSet() const;
    void unsetLastModifyingUser();
    void setLastModifyingUser(std::shared_ptr<User> value);
    /// <summary>
    /// The MD5 checksum for the content of the file. This is only applicable to files with binary content in Drive.
    /// </summary>
    utility::string_t getMd5Checksum() const;
    bool md5ChecksumIsSet() const;
    void unsetMd5Checksum();
    void setMd5Checksum(utility::string_t value);
    /// <summary>
    /// The MIME type of the file. Drive will attempt to automatically detect an appropriate value from uploaded content if no value is provided. The value cannot be changed unless a new revision is uploaded. If a file is created with a Google Doc MIME type, the uploaded content will be imported if possible. The supported import formats are published in the About resource.
    /// </summary>
    utility::string_t getMimeType() const;
    bool mimeTypeIsSet() const;
    void unsetMimeType();
    void setMimeType(utility::string_t value);
    /// <summary>
    /// Whether the file has been modified by this user.
    /// </summary>
    bool getModifiedByMe() const;
    bool modifiedByMeIsSet() const;
    void unsetModifiedByMe();
    void setModifiedByMe(bool value);
    /// <summary>
    /// The last time the file was modified by the user (RFC 3339 date-time).
    /// </summary>
    utility::datetime getModifiedByMeTime() const;
    bool modifiedByMeTimeIsSet() const;
    void unsetModifiedByMeTime();
    void setModifiedByMeTime(utility::datetime value);
    /// <summary>
    /// The last time the file was modified by anyone (RFC 3339 date-time). Note that setting modifiedTime will also update modifiedByMeTime for the user.
    /// </summary>
    utility::datetime getModifiedTime() const;
    bool modifiedTimeIsSet() const;
    void unsetModifiedTime();
    void setModifiedTime(utility::datetime value);
    /// <summary>
    /// The name of the file. This is not necessarily unique within a folder. Note that for immutable items such as the top level folders of Team Drives, My Drive root folder, and Application Data folder the name is constant.
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();
    void setName(utility::string_t value);
    /// <summary>
    /// The original filename of the uploaded content if available, or else the original value of the name field. This is only available for files with binary content in Drive.
    /// </summary>
    utility::string_t getOriginalFilename() const;
    bool originalFilenameIsSet() const;
    void unsetOriginalFilename();
    void setOriginalFilename(utility::string_t value);
    /// <summary>
    /// Whether the user owns the file. Not populated for Team Drive files.
    /// </summary>
    bool getOwnedByMe() const;
    bool ownedByMeIsSet() const;
    void unsetOwnedByMe();
    void setOwnedByMe(bool value);
    /// <summary>
    /// The owners of the file. Currently, only certain legacy files may have more than one owner. Not populated for Team Drive files.
    /// </summary>
    std::vector<std::shared_ptr<User>>& getOwners();
    bool ownersIsSet() const;
    void unsetOwners();
    void setOwners(std::vector<std::shared_ptr<User>> value);
    /// <summary>
    /// The IDs of the parent folders which contain the file. If not specified as part of a create request, the file will be placed directly in the user&#39;s My Drive folder. If not specified as part of a copy request, the file will inherit any discoverable parents of the source file. Update requests must use the addParents and removeParents parameters to modify the parents list.
    /// </summary>
    std::vector<utility::string_t>& getParents();
    bool parentsIsSet() const;
    void unsetParents();
    void setParents(std::vector<utility::string_t> value);
    /// <summary>
    /// List of permission IDs for users with access to this file.
    /// </summary>
    std::vector<utility::string_t>& getPermissionIds();
    bool permissionIdsIsSet() const;
    void unsetPermissionIds();
    void setPermissionIds(std::vector<utility::string_t> value);
    /// <summary>
    /// The full list of permissions for the file. This is only available if the requesting user can share the file. Not populated for Team Drive files.
    /// </summary>
    std::vector<std::shared_ptr<Permission>>& getPermissions();
    bool permissionsIsSet() const;
    void unsetPermissions();
    void setPermissions(std::vector<std::shared_ptr<Permission>> value);
    /// <summary>
    /// A collection of arbitrary key-value pairs which are visible to all apps. Entries with null values are cleared in update and copy requests.
    /// </summary>
    std::map<utility::string_t, utility::string_t>& getProperties();
    bool propertiesIsSet() const;
    void unsetProperties();
    void setProperties(std::map<utility::string_t, utility::string_t> value);
    /// <summary>
    /// The number of storage quota bytes used by the file. This includes the head revision as well as previous revisions with keepForever enabled.
    /// </summary>
    utility::string_t getQuotaBytesUsed() const;
    bool quotaBytesUsedIsSet() const;
    void unsetQuotaBytesUsed();
    void setQuotaBytesUsed(utility::string_t value);
    /// <summary>
    /// Whether the file has been shared. Not populated for Team Drive files.
    /// </summary>
    bool getShared() const;
    bool sharedIsSet() const;
    void unsetShared();
    void setShared(bool value);
    /// <summary>
    /// The time at which the file was shared with the user, if applicable (RFC 3339 date-time).
    /// </summary>
    utility::datetime getSharedWithMeTime() const;
    bool sharedWithMeTimeIsSet() const;
    void unsetSharedWithMeTime();
    void setSharedWithMeTime(utility::datetime value);
    /// <summary>
    /// The user who shared the file with the requesting user, if applicable.
    /// </summary>
    std::shared_ptr<User> getSharingUser() const;
    bool sharingUserIsSet() const;
    void unsetSharingUser();
    void setSharingUser(std::shared_ptr<User> value);
    /// <summary>
    /// The size of the file&#39;s content in bytes. This is only applicable to files with binary content in Drive.
    /// </summary>
    utility::string_t getSize() const;
    bool sizeIsSet() const;
    void unsetSize();
    void setSize(utility::string_t value);
    /// <summary>
    /// The list of spaces which contain the file. The currently supported values are &#39;drive&#39;, &#39;appDataFolder&#39; and &#39;photos&#39;.
    /// </summary>
    std::vector<utility::string_t>& getSpaces();
    bool spacesIsSet() const;
    void unsetSpaces();
    void setSpaces(std::vector<utility::string_t> value);
    /// <summary>
    /// Whether the user has starred the file.
    /// </summary>
    bool getStarred() const;
    bool starredIsSet() const;
    void unsetStarred();
    void setStarred(bool value);
    /// <summary>
    /// ID of the Team Drive the file resides in.
    /// </summary>
    utility::string_t getTeamDriveId() const;
    bool teamDriveIdIsSet() const;
    void unsetTeamDriveId();
    void setTeamDriveId(utility::string_t value);
    /// <summary>
    /// A short-lived link to the file&#39;s thumbnail, if available. Typically lasts on the order of hours. Only populated when the requesting app can access the file&#39;s content.
    /// </summary>
    utility::string_t getThumbnailLink() const;
    bool thumbnailLinkIsSet() const;
    void unsetThumbnailLink();
    void setThumbnailLink(utility::string_t value);
    /// <summary>
    /// The thumbnail version for use in thumbnail cache invalidation.
    /// </summary>
    utility::string_t getThumbnailVersion() const;
    bool thumbnailVersionIsSet() const;
    void unsetThumbnailVersion();
    void setThumbnailVersion(utility::string_t value);
    /// <summary>
    /// Whether the file has been trashed, either explicitly or from a trashed parent folder. Only the owner may trash a file, and other users cannot see files in the owner&#39;s trash.
    /// </summary>
    bool getTrashed() const;
    bool trashedIsSet() const;
    void unsetTrashed();
    void setTrashed(bool value);
    /// <summary>
    /// The time that the item was trashed (RFC 3339 date-time). Only populated for Team Drive files.
    /// </summary>
    utility::datetime getTrashedTime() const;
    bool trashedTimeIsSet() const;
    void unsetTrashedTime();
    void setTrashedTime(utility::datetime value);
    /// <summary>
    /// If the file has been explicitly trashed, the user who trashed it. Only populated for Team Drive files.
    /// </summary>
    std::shared_ptr<User> getTrashingUser() const;
    bool trashingUserIsSet() const;
    void unsetTrashingUser();
    void setTrashingUser(std::shared_ptr<User> value);
    /// <summary>
    /// A monotonically increasing version number for the file. This reflects every change made to the file on the server, even those not visible to the user.
    /// </summary>
    utility::string_t getVersion() const;
    bool versionIsSet() const;
    void unsetVersion();
    void setVersion(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<File_videoMediaMetadata> getVideoMediaMetadata() const;
    bool videoMediaMetadataIsSet() const;
    void unsetVideoMediaMetadata();
    void setVideoMediaMetadata(std::shared_ptr<File_videoMediaMetadata> value);
    /// <summary>
    /// Whether the file has been viewed by this user.
    /// </summary>
    bool getViewedByMe() const;
    bool viewedByMeIsSet() const;
    void unsetViewedByMe();
    void setViewedByMe(bool value);
    /// <summary>
    /// The last time the file was viewed by the user (RFC 3339 date-time).
    /// </summary>
    utility::datetime getViewedByMeTime() const;
    bool viewedByMeTimeIsSet() const;
    void unsetViewedByMeTime();
    void setViewedByMeTime(utility::datetime value);
    /// <summary>
    /// Whether users with only reader or commenter permission can copy the file&#39;s content. This affects copy, download, and print operations.
    /// </summary>
    bool getViewersCanCopyContent() const;
    bool viewersCanCopyContentIsSet() const;
    void unsetViewersCanCopyContent();
    void setViewersCanCopyContent(bool value);
    /// <summary>
    /// A link for downloading the content of the file in a browser. This is only available for files with binary content in Drive.
    /// </summary>
    utility::string_t getWebContentLink() const;
    bool webContentLinkIsSet() const;
    void unsetWebContentLink();
    void setWebContentLink(utility::string_t value);
    /// <summary>
    /// A link for opening the file in a relevant Google editor or viewer in a browser.
    /// </summary>
    utility::string_t getWebViewLink() const;
    bool webViewLinkIsSet() const;
    void unsetWebViewLink();
    void setWebViewLink(utility::string_t value);
    /// <summary>
    /// Whether users with only writer permission can modify the file&#39;s permissions. Not populated for Team Drive files.
    /// </summary>
    bool getWritersCanShare() const;
    bool writersCanShareIsSet() const;
    void unsetWritersCanShare();
    void setWritersCanShare(bool value);

protected:
    std::map<utility::string_t, utility::string_t> m_AppProperties;
    bool m_AppPropertiesIsSet;
    std::shared_ptr<File_capabilities> m_Capabilities;
    bool m_CapabilitiesIsSet;
    std::shared_ptr<File_contentHints> m_ContentHints;
    bool m_ContentHintsIsSet;
    utility::datetime m_CreatedTime;
    bool m_CreatedTimeIsSet;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    bool m_ExplicitlyTrashed;
    bool m_ExplicitlyTrashedIsSet;
    utility::string_t m_FileExtension;
    bool m_FileExtensionIsSet;
    utility::string_t m_FolderColorRgb;
    bool m_FolderColorRgbIsSet;
    utility::string_t m_FullFileExtension;
    bool m_FullFileExtensionIsSet;
    bool m_HasAugmentedPermissions;
    bool m_HasAugmentedPermissionsIsSet;
    bool m_HasThumbnail;
    bool m_HasThumbnailIsSet;
    utility::string_t m_HeadRevisionId;
    bool m_HeadRevisionIdIsSet;
    utility::string_t m_IconLink;
    bool m_IconLinkIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    std::shared_ptr<File_imageMediaMetadata> m_ImageMediaMetadata;
    bool m_ImageMediaMetadataIsSet;
    bool m_IsAppAuthorized;
    bool m_IsAppAuthorizedIsSet;
    utility::string_t m_Kind;
    bool m_KindIsSet;
    std::shared_ptr<User> m_LastModifyingUser;
    bool m_LastModifyingUserIsSet;
    utility::string_t m_Md5Checksum;
    bool m_Md5ChecksumIsSet;
    utility::string_t m_MimeType;
    bool m_MimeTypeIsSet;
    bool m_ModifiedByMe;
    bool m_ModifiedByMeIsSet;
    utility::datetime m_ModifiedByMeTime;
    bool m_ModifiedByMeTimeIsSet;
    utility::datetime m_ModifiedTime;
    bool m_ModifiedTimeIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_OriginalFilename;
    bool m_OriginalFilenameIsSet;
    bool m_OwnedByMe;
    bool m_OwnedByMeIsSet;
    std::vector<std::shared_ptr<User>> m_Owners;
    bool m_OwnersIsSet;
    std::vector<utility::string_t> m_Parents;
    bool m_ParentsIsSet;
    std::vector<utility::string_t> m_PermissionIds;
    bool m_PermissionIdsIsSet;
    std::vector<std::shared_ptr<Permission>> m_Permissions;
    bool m_PermissionsIsSet;
    std::map<utility::string_t, utility::string_t> m_Properties;
    bool m_PropertiesIsSet;
    utility::string_t m_QuotaBytesUsed;
    bool m_QuotaBytesUsedIsSet;
    bool m_Shared;
    bool m_SharedIsSet;
    utility::datetime m_SharedWithMeTime;
    bool m_SharedWithMeTimeIsSet;
    std::shared_ptr<User> m_SharingUser;
    bool m_SharingUserIsSet;
    utility::string_t m_Size;
    bool m_SizeIsSet;
    std::vector<utility::string_t> m_Spaces;
    bool m_SpacesIsSet;
    bool m_Starred;
    bool m_StarredIsSet;
    utility::string_t m_TeamDriveId;
    bool m_TeamDriveIdIsSet;
    utility::string_t m_ThumbnailLink;
    bool m_ThumbnailLinkIsSet;
    utility::string_t m_ThumbnailVersion;
    bool m_ThumbnailVersionIsSet;
    bool m_Trashed;
    bool m_TrashedIsSet;
    utility::datetime m_TrashedTime;
    bool m_TrashedTimeIsSet;
    std::shared_ptr<User> m_TrashingUser;
    bool m_TrashingUserIsSet;
    utility::string_t m_Version;
    bool m_VersionIsSet;
    std::shared_ptr<File_videoMediaMetadata> m_VideoMediaMetadata;
    bool m_VideoMediaMetadataIsSet;
    bool m_ViewedByMe;
    bool m_ViewedByMeIsSet;
    utility::datetime m_ViewedByMeTime;
    bool m_ViewedByMeTimeIsSet;
    bool m_ViewersCanCopyContent;
    bool m_ViewersCanCopyContentIsSet;
    utility::string_t m_WebContentLink;
    bool m_WebContentLinkIsSet;
    utility::string_t m_WebViewLink;
    bool m_WebViewLinkIsSet;
    bool m_WritersCanShare;
    bool m_WritersCanShareIsSet;
};

}
}
}
}

#endif /* File_H_ */
