/**
 * Drive
 * Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * FileList.h
 *
 * A list of files.
 */

#ifndef FileList_H_
#define FileList_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "File.h"
#include <vector>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// A list of files.
/// </summary>
class  FileList
    : public ModelBase
{
public:
    FileList();
    virtual ~FileList();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// FileList members

    /// <summary>
    /// The list of files. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
    /// </summary>
    std::vector<std::shared_ptr<File>>& getFiles();
    bool filesIsSet() const;
    void unsetFiles();
    void setFiles(std::vector<std::shared_ptr<File>> value);
    /// <summary>
    /// Whether the search process was incomplete. If true, then some search results may be missing, since all documents were not searched. This may occur when searching multiple Team Drives with the \&quot;user,allTeamDrives\&quot; corpora, but all corpora could not be searched. When this happens, it is suggested that clients narrow their query by choosing a different corpus such as \&quot;user\&quot; or \&quot;teamDrive\&quot;.
    /// </summary>
    bool getIncompleteSearch() const;
    bool incompleteSearchIsSet() const;
    void unsetIncompleteSearch();
    void setIncompleteSearch(bool value);
    /// <summary>
    /// Identifies what kind of resource this is. Value: the fixed string \&quot;drive#fileList\&quot;.
    /// </summary>
    utility::string_t getKind() const;
    bool kindIsSet() const;
    void unsetKind();
    void setKind(utility::string_t value);
    /// <summary>
    /// The page token for the next page of files. This will be absent if the end of the files list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results.
    /// </summary>
    utility::string_t getNextPageToken() const;
    bool nextPageTokenIsSet() const;
    void unsetNextPageToken();
    void setNextPageToken(utility::string_t value);

protected:
    std::vector<std::shared_ptr<File>> m_Files;
    bool m_FilesIsSet;
    bool m_IncompleteSearch;
    bool m_IncompleteSearchIsSet;
    utility::string_t m_Kind;
    bool m_KindIsSet;
    utility::string_t m_NextPageToken;
    bool m_NextPageTokenIsSet;
};

}
}
}
}

#endif /* FileList_H_ */
