/**
 * Drive
 * Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * File_capabilities.h
 *
 * Capabilities the current user has on this file. Each capability corresponds to a fine-grained action that a user may take.
 */

#ifndef File_capabilities_H_
#define File_capabilities_H_


#include "ModelBase.h"


namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// Capabilities the current user has on this file. Each capability corresponds to a fine-grained action that a user may take.
/// </summary>
class  File_capabilities
    : public ModelBase
{
public:
    File_capabilities();
    virtual ~File_capabilities();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// File_capabilities members

    /// <summary>
    /// Whether the current user can add children to this folder. This is always false when the item is not a folder.
    /// </summary>
    bool getCanAddChildren() const;
    bool canAddChildrenIsSet() const;
    void unsetCanAddChildren();
    void setCanAddChildren(bool value);
    /// <summary>
    /// Whether the current user can change whether viewers can copy the contents of this file.
    /// </summary>
    bool getCanChangeViewersCanCopyContent() const;
    bool canChangeViewersCanCopyContentIsSet() const;
    void unsetCanChangeViewersCanCopyContent();
    void setCanChangeViewersCanCopyContent(bool value);
    /// <summary>
    /// Whether the current user can comment on this file.
    /// </summary>
    bool getCanComment() const;
    bool canCommentIsSet() const;
    void unsetCanComment();
    void setCanComment(bool value);
    /// <summary>
    /// Whether the current user can copy this file. For a Team Drive item, whether the current user can copy non-folder descendants of this item, or this item itself if it is not a folder.
    /// </summary>
    bool getCanCopy() const;
    bool canCopyIsSet() const;
    void unsetCanCopy();
    void setCanCopy(bool value);
    /// <summary>
    /// Whether the current user can delete this file.
    /// </summary>
    bool getCanDelete() const;
    bool canDeleteIsSet() const;
    void unsetCanDelete();
    void setCanDelete(bool value);
    /// <summary>
    /// Whether the current user can download this file.
    /// </summary>
    bool getCanDownload() const;
    bool canDownloadIsSet() const;
    void unsetCanDownload();
    void setCanDownload(bool value);
    /// <summary>
    /// Whether the current user can edit this file.
    /// </summary>
    bool getCanEdit() const;
    bool canEditIsSet() const;
    void unsetCanEdit();
    void setCanEdit(bool value);
    /// <summary>
    /// Whether the current user can list the children of this folder. This is always false when the item is not a folder.
    /// </summary>
    bool getCanListChildren() const;
    bool canListChildrenIsSet() const;
    void unsetCanListChildren();
    void setCanListChildren(bool value);
    /// <summary>
    /// Whether the current user can move this item into a Team Drive. If the item is in a Team Drive, this field is equivalent to canMoveTeamDriveItem.
    /// </summary>
    bool getCanMoveItemIntoTeamDrive() const;
    bool canMoveItemIntoTeamDriveIsSet() const;
    void unsetCanMoveItemIntoTeamDrive();
    void setCanMoveItemIntoTeamDrive(bool value);
    /// <summary>
    /// Whether the current user can move this Team Drive item by changing its parent. Note that a request to change the parent for this item may still fail depending on the new parent that is being added. Only populated for Team Drive files.
    /// </summary>
    bool getCanMoveTeamDriveItem() const;
    bool canMoveTeamDriveItemIsSet() const;
    void unsetCanMoveTeamDriveItem();
    void setCanMoveTeamDriveItem(bool value);
    /// <summary>
    /// Whether the current user can read the revisions resource of this file. For a Team Drive item, whether revisions of non-folder descendants of this item, or this item itself if it is not a folder, can be read.
    /// </summary>
    bool getCanReadRevisions() const;
    bool canReadRevisionsIsSet() const;
    void unsetCanReadRevisions();
    void setCanReadRevisions(bool value);
    /// <summary>
    /// Whether the current user can read the Team Drive to which this file belongs. Only populated for Team Drive files.
    /// </summary>
    bool getCanReadTeamDrive() const;
    bool canReadTeamDriveIsSet() const;
    void unsetCanReadTeamDrive();
    void setCanReadTeamDrive(bool value);
    /// <summary>
    /// Whether the current user can remove children from this folder. This is always false when the item is not a folder.
    /// </summary>
    bool getCanRemoveChildren() const;
    bool canRemoveChildrenIsSet() const;
    void unsetCanRemoveChildren();
    void setCanRemoveChildren(bool value);
    /// <summary>
    /// Whether the current user can rename this file.
    /// </summary>
    bool getCanRename() const;
    bool canRenameIsSet() const;
    void unsetCanRename();
    void setCanRename(bool value);
    /// <summary>
    /// Whether the current user can modify the sharing settings for this file.
    /// </summary>
    bool getCanShare() const;
    bool canShareIsSet() const;
    void unsetCanShare();
    void setCanShare(bool value);
    /// <summary>
    /// Whether the current user can move this file to trash.
    /// </summary>
    bool getCanTrash() const;
    bool canTrashIsSet() const;
    void unsetCanTrash();
    void setCanTrash(bool value);
    /// <summary>
    /// Whether the current user can restore this file from trash.
    /// </summary>
    bool getCanUntrash() const;
    bool canUntrashIsSet() const;
    void unsetCanUntrash();
    void setCanUntrash(bool value);

protected:
    bool m_CanAddChildren;
    bool m_CanAddChildrenIsSet;
    bool m_CanChangeViewersCanCopyContent;
    bool m_CanChangeViewersCanCopyContentIsSet;
    bool m_CanComment;
    bool m_CanCommentIsSet;
    bool m_CanCopy;
    bool m_CanCopyIsSet;
    bool m_CanDelete;
    bool m_CanDeleteIsSet;
    bool m_CanDownload;
    bool m_CanDownloadIsSet;
    bool m_CanEdit;
    bool m_CanEditIsSet;
    bool m_CanListChildren;
    bool m_CanListChildrenIsSet;
    bool m_CanMoveItemIntoTeamDrive;
    bool m_CanMoveItemIntoTeamDriveIsSet;
    bool m_CanMoveTeamDriveItem;
    bool m_CanMoveTeamDriveItemIsSet;
    bool m_CanReadRevisions;
    bool m_CanReadRevisionsIsSet;
    bool m_CanReadTeamDrive;
    bool m_CanReadTeamDriveIsSet;
    bool m_CanRemoveChildren;
    bool m_CanRemoveChildrenIsSet;
    bool m_CanRename;
    bool m_CanRenameIsSet;
    bool m_CanShare;
    bool m_CanShareIsSet;
    bool m_CanTrash;
    bool m_CanTrashIsSet;
    bool m_CanUntrash;
    bool m_CanUntrashIsSet;
};

}
}
}
}

#endif /* File_capabilities_H_ */
