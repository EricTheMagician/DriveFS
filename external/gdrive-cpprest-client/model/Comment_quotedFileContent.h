/**
 * Drive
 * Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Comment_quotedFileContent.h
 *
 * The file content to which the comment refers, typically within the anchor region. For a text file, for example, this would be the text at the location of the comment.
 */

#ifndef Comment_quotedFileContent_H_
#define Comment_quotedFileContent_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// The file content to which the comment refers, typically within the anchor region. For a text file, for example, this would be the text at the location of the comment.
/// </summary>
class  Comment_quotedFileContent
    : public ModelBase
{
public:
    Comment_quotedFileContent();
    virtual ~Comment_quotedFileContent();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Comment_quotedFileContent members

    /// <summary>
    /// The MIME type of the quoted content.
    /// </summary>
    utility::string_t getMimeType() const;
    bool mimeTypeIsSet() const;
    void unsetMimeType();
    void setMimeType(utility::string_t value);
    /// <summary>
    /// The quoted content itself. This is interpreted as plain text if set through the API.
    /// </summary>
    utility::string_t getValue() const;
    bool valueIsSet() const;
    void unsetValue();
    void setValue(utility::string_t value);

protected:
    utility::string_t m_MimeType;
    bool m_MimeTypeIsSet;
    utility::string_t m_Value;
    bool m_ValueIsSet;
};

}
}
}
}

#endif /* Comment_quotedFileContent_H_ */
