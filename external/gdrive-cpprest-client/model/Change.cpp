/**
 * Drive
 * Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Change.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Change::Change()
{
    m_fileIsSet = false;
    m_FileId = U("");
    m_FileIdIsSet = false;
    m_Kind = U("");
    m_KindIsSet = false;
    m_Removed = false;
    m_RemovedIsSet = false;
    m_TeamDriveIsSet = false;
    m_TeamDriveId = U("");
    m_TeamDriveIdIsSet = false;
    m_Time = utility::datetime();
    m_TimeIsSet = false;
    m_Type = U("");
    m_TypeIsSet = false;
}

Change::~Change()
{
}

void Change::validate()
{
    // TODO: implement validation
}

web::json::value Change::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_fileIsSet)
    {
        val[U("file")] = ModelBase::toJson(m_file);
    }
    if(m_FileIdIsSet)
    {
        val[U("fileId")] = ModelBase::toJson(m_FileId);
    }
    if(m_KindIsSet)
    {
        val[U("kind")] = ModelBase::toJson(m_Kind);
    }
    if(m_RemovedIsSet)
    {
        val[U("removed")] = ModelBase::toJson(m_Removed);
    }
    if(m_TeamDriveIsSet)
    {
        val[U("teamDrive")] = ModelBase::toJson(m_TeamDrive);
    }
    if(m_TeamDriveIdIsSet)
    {
        val[U("teamDriveId")] = ModelBase::toJson(m_TeamDriveId);
    }
    if(m_TimeIsSet)
    {
        val[U("time")] = ModelBase::toJson(m_Time);
    }
    if(m_TypeIsSet)
    {
        val[U("type")] = ModelBase::toJson(m_Type);
    }

    return val;
}

void Change::fromJson(web::json::value& val)
{
    if(val.has_field(U("file")))
    {
        if(!val[U("file")].is_null())
        {
            std::shared_ptr<File> newItem(new File());
            newItem->fromJson(val[U("file")]);
            setFile( newItem );
        }
    }
    if(val.has_field(U("fileId")))
    {
        setFileId(ModelBase::stringFromJson(val[U("fileId")]));
    }
    if(val.has_field(U("kind")))
    {
        setKind(ModelBase::stringFromJson(val[U("kind")]));
    }
    if(val.has_field(U("removed")))
    {
        setRemoved(ModelBase::boolFromJson(val[U("removed")]));
    }
    if(val.has_field(U("teamDrive")))
    {
        if(!val[U("teamDrive")].is_null())
        {
            std::shared_ptr<TeamDrive> newItem(new TeamDrive());
            newItem->fromJson(val[U("teamDrive")]);
            setTeamDrive( newItem );
        }
    }
    if(val.has_field(U("teamDriveId")))
    {
        setTeamDriveId(ModelBase::stringFromJson(val[U("teamDriveId")]));
    }
    if(val.has_field(U("time")))
    {
        setTime(ModelBase::dateFromJson(val[U("time")]));
    }
    if(val.has_field(U("type")))
    {
        setType(ModelBase::stringFromJson(val[U("type")]));
    }
}

void Change::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_fileIsSet)
    {
        if (m_file.get())
        {
            m_file->toMultipart(multipart, U("file."));
        }
        
    }
    if(m_FileIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("fileId"), m_FileId));
        
    }
    if(m_KindIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("kind"), m_Kind));
        
    }
    if(m_RemovedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("removed"), m_Removed));
    }
    if(m_TeamDriveIsSet)
    {
        if (m_TeamDrive.get())
        {
            m_TeamDrive->toMultipart(multipart, U("teamDrive."));
        }
        
    }
    if(m_TeamDriveIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("teamDriveId"), m_TeamDriveId));
        
    }
    if(m_TimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("time"), m_Time));
        
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("type"), m_Type));
        
    }
}

void Change::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("file")))
    {
        if(multipart->hasContent(U("file")))
        {
            std::shared_ptr<File> newItem(new File());
            newItem->fromMultiPart(multipart, U("file."));
            setFile( newItem );
        }
    }
    if(multipart->hasContent(U("fileId")))
    {
        setFileId(ModelBase::stringFromHttpContent(multipart->getContent(U("fileId"))));
    }
    if(multipart->hasContent(U("kind")))
    {
        setKind(ModelBase::stringFromHttpContent(multipart->getContent(U("kind"))));
    }
    if(multipart->hasContent(U("removed")))
    {
        setRemoved(ModelBase::boolFromHttpContent(multipart->getContent(U("removed"))));
    }
    if(multipart->hasContent(U("teamDrive")))
    {
        if(multipart->hasContent(U("teamDrive")))
        {
            std::shared_ptr<TeamDrive> newItem(new TeamDrive());
            newItem->fromMultiPart(multipart, U("teamDrive."));
            setTeamDrive( newItem );
        }
    }
    if(multipart->hasContent(U("teamDriveId")))
    {
        setTeamDriveId(ModelBase::stringFromHttpContent(multipart->getContent(U("teamDriveId"))));
    }
    if(multipart->hasContent(U("time")))
    {
        setTime(ModelBase::dateFromHttpContent(multipart->getContent(U("time"))));
    }
    if(multipart->hasContent(U("type")))
    {
        setType(ModelBase::stringFromHttpContent(multipart->getContent(U("type"))));
    }
}

std::shared_ptr<File> Change::getFile() const
{
    return m_file;
}


void Change::setFile(std::shared_ptr<File> value)
{
    m_file = value;
    m_fileIsSet = true;
}
bool Change::fileIsSet() const
{
    return m_fileIsSet;
}

void Change::unsetfile()
{
    m_fileIsSet = false;
}

utility::string_t Change::getFileId() const
{
    return m_FileId;
}


void Change::setFileId(utility::string_t value)
{
    m_FileId = value;
    m_FileIdIsSet = true;
}
bool Change::fileIdIsSet() const
{
    return m_FileIdIsSet;
}

void Change::unsetFileId()
{
    m_FileIdIsSet = false;
}

utility::string_t Change::getKind() const
{
    return m_Kind;
}


void Change::setKind(utility::string_t value)
{
    m_Kind = value;
    m_KindIsSet = true;
}
bool Change::kindIsSet() const
{
    return m_KindIsSet;
}

void Change::unsetKind()
{
    m_KindIsSet = false;
}

bool Change::getRemoved() const
{
    return m_Removed;
}


void Change::setRemoved(bool value)
{
    m_Removed = value;
    m_RemovedIsSet = true;
}
bool Change::removedIsSet() const
{
    return m_RemovedIsSet;
}

void Change::unsetRemoved()
{
    m_RemovedIsSet = false;
}

std::shared_ptr<TeamDrive> Change::getTeamDrive() const
{
    return m_TeamDrive;
}


void Change::setTeamDrive(std::shared_ptr<TeamDrive> value)
{
    m_TeamDrive = value;
    m_TeamDriveIsSet = true;
}
bool Change::teamDriveIsSet() const
{
    return m_TeamDriveIsSet;
}

void Change::unsetTeamDrive()
{
    m_TeamDriveIsSet = false;
}

utility::string_t Change::getTeamDriveId() const
{
    return m_TeamDriveId;
}


void Change::setTeamDriveId(utility::string_t value)
{
    m_TeamDriveId = value;
    m_TeamDriveIdIsSet = true;
}
bool Change::teamDriveIdIsSet() const
{
    return m_TeamDriveIdIsSet;
}

void Change::unsetTeamDriveId()
{
    m_TeamDriveIdIsSet = false;
}

utility::datetime Change::getTime() const
{
    return m_Time;
}


void Change::setTime(utility::datetime value)
{
    m_Time = value;
    m_TimeIsSet = true;
}
bool Change::timeIsSet() const
{
    return m_TimeIsSet;
}

void Change::unsetTime()
{
    m_TimeIsSet = false;
}

utility::string_t Change::getType() const
{
    return m_Type;
}


void Change::setType(utility::string_t value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool Change::typeIsSet() const
{
    return m_TypeIsSet;
}

void Change::unsetType()
{
    m_TypeIsSet = false;
}

}
}
}
}

