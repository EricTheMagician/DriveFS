/**
 * Drive
 * Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Change.h
 *
 * A change to a file or Team Drive.
 */

#ifndef Change_H_
#define Change_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "TeamDrive.h"
#include "File.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// A change to a file or Team Drive.
/// </summary>
class  Change
    : public ModelBase
{
public:
    Change();
    virtual ~Change();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Change members

    /// <summary>
    /// The updated state of the file. Present if the type is file and the file has not been removed from this list of changes.
    /// </summary>
    std::shared_ptr<File> getFile() const;
    bool fileIsSet() const;
    void unsetfile();
    void setFile(std::shared_ptr<File> value);
    /// <summary>
    /// The ID of the file which has changed.
    /// </summary>
    utility::string_t getFileId() const;
    bool fileIdIsSet() const;
    void unsetFileId();
    void setFileId(utility::string_t value);
    /// <summary>
    /// Identifies what kind of resource this is. Value: the fixed string \&quot;drive#change\&quot;.
    /// </summary>
    utility::string_t getKind() const;
    bool kindIsSet() const;
    void unsetKind();
    void setKind(utility::string_t value);
    /// <summary>
    /// Whether the file or Team Drive has been removed from this list of changes, for example by deletion or loss of access.
    /// </summary>
    bool getRemoved() const;
    bool removedIsSet() const;
    void unsetRemoved();
    void setRemoved(bool value);
    /// <summary>
    /// The updated state of the Team Drive. Present if the type is teamDrive, the user is still a member of the Team Drive, and the Team Drive has not been removed.
    /// </summary>
    std::shared_ptr<TeamDrive> getTeamDrive() const;
    bool teamDriveIsSet() const;
    void unsetTeamDrive();
    void setTeamDrive(std::shared_ptr<TeamDrive> value);
    /// <summary>
    /// The ID of the Team Drive associated with this change.
    /// </summary>
    utility::string_t getTeamDriveId() const;
    bool teamDriveIdIsSet() const;
    void unsetTeamDriveId();
    void setTeamDriveId(utility::string_t value);
    /// <summary>
    /// The time of this change (RFC 3339 date-time).
    /// </summary>
    utility::datetime getTime() const;
    bool timeIsSet() const;
    void unsetTime();
    void setTime(utility::datetime value);
    /// <summary>
    /// The type of the change. Possible values are file and teamDrive.
    /// </summary>
    utility::string_t getType() const;
    bool typeIsSet() const;
    void unsetType();
    void setType(utility::string_t value);

protected:
    std::shared_ptr<File> m_file;
    bool m_fileIsSet;
    utility::string_t m_FileId;
    bool m_FileIdIsSet;
    utility::string_t m_Kind;
    bool m_KindIsSet;
    bool m_Removed;
    bool m_RemovedIsSet;
    std::shared_ptr<TeamDrive> m_TeamDrive;
    bool m_TeamDriveIsSet;
    utility::string_t m_TeamDriveId;
    bool m_TeamDriveIdIsSet;
    utility::datetime m_Time;
    bool m_TimeIsSet;
    utility::string_t m_Type;
    bool m_TypeIsSet;
};

}
}
}
}

#endif /* Change_H_ */
