/**
 * Drive
 * Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Permission.h
 *
 * A permission for a file. A permission grants a user, group, domain or the world access to a file or a folder hierarchy.
 */

#ifndef Permission_H_
#define Permission_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "Permission_teamDrivePermissionDetails.h"
#include <vector>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// A permission for a file. A permission grants a user, group, domain or the world access to a file or a folder hierarchy.
/// </summary>
class  Permission
    : public ModelBase
{
public:
    Permission();
    virtual ~Permission();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Permission members

    /// <summary>
    /// Whether the permission allows the file to be discovered through search. This is only applicable for permissions of type domain or anyone.
    /// </summary>
    bool getAllowFileDiscovery() const;
    bool allowFileDiscoveryIsSet() const;
    void unsetAllowFileDiscovery();
    void setAllowFileDiscovery(bool value);
    /// <summary>
    /// Whether the account associated with this permission has been deleted. This field only pertains to user and group permissions.
    /// </summary>
    bool getDeleted() const;
    bool deletedIsSet() const;
    void unsetDeleted();
    void setDeleted(bool value);
    /// <summary>
    /// A displayable name for users, groups or domains.
    /// </summary>
    utility::string_t getDisplayName() const;
    bool displayNameIsSet() const;
    void unsetDisplayName();
    void setDisplayName(utility::string_t value);
    /// <summary>
    /// The domain to which this permission refers.
    /// </summary>
    utility::string_t getDomain() const;
    bool domainIsSet() const;
    void unsetDomain();
    void setDomain(utility::string_t value);
    /// <summary>
    /// The email address of the user or group to which this permission refers.
    /// </summary>
    utility::string_t getEmailAddress() const;
    bool emailAddressIsSet() const;
    void unsetEmailAddress();
    void setEmailAddress(utility::string_t value);
    /// <summary>
    /// The time at which this permission will expire (RFC 3339 date-time). Expiration times have the following restrictions:   - They can only be set on user and group permissions  - The time must be in the future  - The time cannot be more than a year in the future
    /// </summary>
    utility::datetime getExpirationTime() const;
    bool expirationTimeIsSet() const;
    void unsetExpirationTime();
    void setExpirationTime(utility::datetime value);
    /// <summary>
    /// The ID of this permission. This is a unique identifier for the grantee, and is published in User resources as permissionId.
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();
    void setId(utility::string_t value);
    /// <summary>
    /// Identifies what kind of resource this is. Value: the fixed string \&quot;drive#permission\&quot;.
    /// </summary>
    utility::string_t getKind() const;
    bool kindIsSet() const;
    void unsetKind();
    void setKind(utility::string_t value);
    /// <summary>
    /// A link to the user&#39;s profile photo, if available.
    /// </summary>
    utility::string_t getPhotoLink() const;
    bool photoLinkIsSet() const;
    void unsetPhotoLink();
    void setPhotoLink(utility::string_t value);
    /// <summary>
    /// The role granted by this permission. While new values may be supported in the future, the following are currently allowed:   - organizer  - owner  - writer  - commenter  - reader
    /// </summary>
    utility::string_t getRole() const;
    bool roleIsSet() const;
    void unsetRole();
    void setRole(utility::string_t value);
    /// <summary>
    /// Details of whether the permissions on this Team Drive item are inherited or directly on this item. This is an output-only field which is present only for Team Drive items.
    /// </summary>
    std::vector<std::shared_ptr<Permission_teamDrivePermissionDetails>>& getTeamDrivePermissionDetails();
    bool teamDrivePermissionDetailsIsSet() const;
    void unsetTeamDrivePermissionDetails();
    void setTeamDrivePermissionDetails(std::vector<std::shared_ptr<Permission_teamDrivePermissionDetails>> value);
    /// <summary>
    /// The type of the grantee. Valid values are:   - user  - group  - domain  - anyone
    /// </summary>
    utility::string_t getType() const;
    bool typeIsSet() const;
    void unsetType();
    void setType(utility::string_t value);

protected:
    bool m_AllowFileDiscovery;
    bool m_AllowFileDiscoveryIsSet;
    bool m_Deleted;
    bool m_DeletedIsSet;
    utility::string_t m_DisplayName;
    bool m_DisplayNameIsSet;
    utility::string_t m_Domain;
    bool m_DomainIsSet;
    utility::string_t m_EmailAddress;
    bool m_EmailAddressIsSet;
    utility::datetime m_ExpirationTime;
    bool m_ExpirationTimeIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Kind;
    bool m_KindIsSet;
    utility::string_t m_PhotoLink;
    bool m_PhotoLinkIsSet;
    utility::string_t m_Role;
    bool m_RoleIsSet;
    std::vector<std::shared_ptr<Permission_teamDrivePermissionDetails>> m_TeamDrivePermissionDetails;
    bool m_TeamDrivePermissionDetailsIsSet;
    utility::string_t m_Type;
    bool m_TypeIsSet;
};

}
}
}
}

#endif /* Permission_H_ */
