/**
 * Drive
 * Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "GeneratedIds.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

GeneratedIds::GeneratedIds()
{
    m_IdsIsSet = false;
    m_Kind = U("");
    m_KindIsSet = false;
    m_Space = U("");
    m_SpaceIsSet = false;
}

GeneratedIds::~GeneratedIds()
{
}

void GeneratedIds::validate()
{
    // TODO: implement validation
}

web::json::value GeneratedIds::toJson() const
{
    web::json::value val = web::json::value::object();

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Ids )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("ids")] = web::json::value::array(jsonArray);
        }
    }
    if(m_KindIsSet)
    {
        val[U("kind")] = ModelBase::toJson(m_Kind);
    }
    if(m_SpaceIsSet)
    {
        val[U("space")] = ModelBase::toJson(m_Space);
    }

    return val;
}

void GeneratedIds::fromJson(web::json::value& val)
{
    {
        m_Ids.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("ids")))
        {
        for( auto& item : val[U("ids")].as_array() )
        {
            m_Ids.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(val.has_field(U("kind")))
    {
        setKind(ModelBase::stringFromJson(val[U("kind")]));
    }
    if(val.has_field(U("space")))
    {
        setSpace(ModelBase::stringFromJson(val[U("space")]));
    }
}

void GeneratedIds::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Ids )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("ids"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_KindIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("kind"), m_Kind));
        
    }
    if(m_SpaceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("space"), m_Space));
        
    }
}

void GeneratedIds::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        m_Ids.clear();
        if(multipart->hasContent(U("ids")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("ids"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Ids.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(multipart->hasContent(U("kind")))
    {
        setKind(ModelBase::stringFromHttpContent(multipart->getContent(U("kind"))));
    }
    if(multipart->hasContent(U("space")))
    {
        setSpace(ModelBase::stringFromHttpContent(multipart->getContent(U("space"))));
    }
}

std::vector<utility::string_t>& GeneratedIds::getIds()
{
    return m_Ids;
}

void GeneratedIds::setIds(std::vector<utility::string_t> value)
{
    m_Ids = value;
    m_IdsIsSet = true;
}
bool GeneratedIds::idsIsSet() const
{
    return m_IdsIsSet;
}

void GeneratedIds::unsetIds()
{
    m_IdsIsSet = false;
}

utility::string_t GeneratedIds::getKind() const
{
    return m_Kind;
}


void GeneratedIds::setKind(utility::string_t value)
{
    m_Kind = value;
    m_KindIsSet = true;
}
bool GeneratedIds::kindIsSet() const
{
    return m_KindIsSet;
}

void GeneratedIds::unsetKind()
{
    m_KindIsSet = false;
}

utility::string_t GeneratedIds::getSpace() const
{
    return m_Space;
}


void GeneratedIds::setSpace(utility::string_t value)
{
    m_Space = value;
    m_SpaceIsSet = true;
}
bool GeneratedIds::spaceIsSet() const
{
    return m_SpaceIsSet;
}

void GeneratedIds::unsetSpace()
{
    m_SpaceIsSet = false;
}

}
}
}
}

