/**
 * Drive
 * Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * TeamDrive_backgroundImageFile.h
 *
 * An image file and cropping parameters from which a background image for this Team Drive is set. This is a write only field; it can only be set on drive.teamdrives.update requests that don&#39;t set themeId. When specified, all fields of the backgroundImageFile must be set.
 */

#ifndef TeamDrive_backgroundImageFile_H_
#define TeamDrive_backgroundImageFile_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// An image file and cropping parameters from which a background image for this Team Drive is set. This is a write only field; it can only be set on drive.teamdrives.update requests that don&#39;t set themeId. When specified, all fields of the backgroundImageFile must be set.
/// </summary>
class  TeamDrive_backgroundImageFile
    : public ModelBase
{
public:
    TeamDrive_backgroundImageFile();
    virtual ~TeamDrive_backgroundImageFile();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// TeamDrive_backgroundImageFile members

    /// <summary>
    /// The ID of an image file in Drive to use for the background image.
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();
    void setId(utility::string_t value);
    /// <summary>
    /// The width of the cropped image in the closed range of 0 to 1. This value represents the width of the cropped image divided by the width of the entire image. The height is computed by applying a width to height aspect ratio of 80 to 9. The resulting image must be at least 1280 pixels wide and 144 pixels high.
    /// </summary>
    float getWidth() const;
    bool widthIsSet() const;
    void unsetWidth();
    void setWidth(float value);
    /// <summary>
    /// The X coordinate of the upper left corner of the cropping area in the background image. This is a value in the closed range of 0 to 1. This value represents the horizontal distance from the left side of the entire image to the left side of the cropping area divided by the width of the entire image.
    /// </summary>
    float getXCoordinate() const;
    bool xCoordinateIsSet() const;
    void unsetXCoordinate();
    void setXCoordinate(float value);
    /// <summary>
    /// The Y coordinate of the upper left corner of the cropping area in the background image. This is a value in the closed range of 0 to 1. This value represents the vertical distance from the top side of the entire image to the top side of the cropping area divided by the height of the entire image.
    /// </summary>
    float getYCoordinate() const;
    bool yCoordinateIsSet() const;
    void unsetYCoordinate();
    void setYCoordinate(float value);

protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    float m_Width;
    bool m_WidthIsSet;
    float m_XCoordinate;
    bool m_XCoordinateIsSet;
    float m_YCoordinate;
    bool m_YCoordinateIsSet;
};

}
}
}
}

#endif /* TeamDrive_backgroundImageFile_H_ */
