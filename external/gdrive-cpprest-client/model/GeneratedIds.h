/**
 * Drive
 * Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * GeneratedIds.h
 *
 * A list of generated file IDs which can be provided in create requests.
 */

#ifndef GeneratedIds_H_
#define GeneratedIds_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// A list of generated file IDs which can be provided in create requests.
/// </summary>
class  GeneratedIds
    : public ModelBase
{
public:
    GeneratedIds();
    virtual ~GeneratedIds();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// GeneratedIds members

    /// <summary>
    /// The IDs generated for the requesting user in the specified space.
    /// </summary>
    std::vector<utility::string_t>& getIds();
    bool idsIsSet() const;
    void unsetIds();
    void setIds(std::vector<utility::string_t> value);
    /// <summary>
    /// Identifies what kind of resource this is. Value: the fixed string \&quot;drive#generatedIds\&quot;.
    /// </summary>
    utility::string_t getKind() const;
    bool kindIsSet() const;
    void unsetKind();
    void setKind(utility::string_t value);
    /// <summary>
    /// The type of file that can be created with these IDs.
    /// </summary>
    utility::string_t getSpace() const;
    bool spaceIsSet() const;
    void unsetSpace();
    void setSpace(utility::string_t value);

protected:
    std::vector<utility::string_t> m_Ids;
    bool m_IdsIsSet;
    utility::string_t m_Kind;
    bool m_KindIsSet;
    utility::string_t m_Space;
    bool m_SpaceIsSet;
};

}
}
}
}

#endif /* GeneratedIds_H_ */
