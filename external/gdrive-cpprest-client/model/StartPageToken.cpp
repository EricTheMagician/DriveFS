/**
 * Drive
 * Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "StartPageToken.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

StartPageToken::StartPageToken()
{
    m_Kind = U("");
    m_KindIsSet = false;
    m_StartPageToken = U("");
    m_StartPageTokenIsSet = false;
}

StartPageToken::~StartPageToken()
{
}

void StartPageToken::validate()
{
    // TODO: implement validation
}

web::json::value StartPageToken::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_KindIsSet)
    {
        val[U("kind")] = ModelBase::toJson(m_Kind);
    }
    if(m_StartPageTokenIsSet)
    {
        val[U("startPageToken")] = ModelBase::toJson(m_StartPageToken);
    }

    return val;
}

void StartPageToken::fromJson(web::json::value& val)
{
    if(val.has_field(U("kind")))
    {
        setKind(ModelBase::stringFromJson(val[U("kind")]));
    }
    if(val.has_field(U("startPageToken")))
    {
        setStartPageToken(ModelBase::stringFromJson(val[U("startPageToken")]));
    }
}

void StartPageToken::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_KindIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("kind"), m_Kind));
        
    }
    if(m_StartPageTokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("startPageToken"), m_StartPageToken));
        
    }
}

void StartPageToken::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("kind")))
    {
        setKind(ModelBase::stringFromHttpContent(multipart->getContent(U("kind"))));
    }
    if(multipart->hasContent(U("startPageToken")))
    {
        setStartPageToken(ModelBase::stringFromHttpContent(multipart->getContent(U("startPageToken"))));
    }
}

utility::string_t StartPageToken::getKind() const
{
    return m_Kind;
}


void StartPageToken::setKind(utility::string_t value)
{
    m_Kind = value;
    m_KindIsSet = true;
}
bool StartPageToken::kindIsSet() const
{
    return m_KindIsSet;
}

void StartPageToken::unsetKind()
{
    m_KindIsSet = false;
}

utility::string_t StartPageToken::getStartPageToken() const
{
    return m_StartPageToken;
}


void StartPageToken::setStartPageToken(utility::string_t value)
{
    m_StartPageToken = value;
    m_StartPageTokenIsSet = true;
}
bool StartPageToken::startPageTokenIsSet() const
{
    return m_StartPageTokenIsSet;
}

void StartPageToken::unsetStartPageToken()
{
    m_StartPageTokenIsSet = false;
}

}
}
}
}

