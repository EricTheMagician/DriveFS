/**
 * Drive
 * Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "File_imageMediaMetadata_location.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

File_imageMediaMetadata_location::File_imageMediaMetadata_location()
{
    m_Altitude = 0.0;
    m_AltitudeIsSet = false;
    m_Latitude = 0.0;
    m_LatitudeIsSet = false;
    m_Longitude = 0.0;
    m_LongitudeIsSet = false;
}

File_imageMediaMetadata_location::~File_imageMediaMetadata_location()
{
}

void File_imageMediaMetadata_location::validate()
{
    // TODO: implement validation
}

web::json::value File_imageMediaMetadata_location::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_AltitudeIsSet)
    {
        val[U("altitude")] = ModelBase::toJson(m_Altitude);
    }
    if(m_LatitudeIsSet)
    {
        val[U("latitude")] = ModelBase::toJson(m_Latitude);
    }
    if(m_LongitudeIsSet)
    {
        val[U("longitude")] = ModelBase::toJson(m_Longitude);
    }

    return val;
}

void File_imageMediaMetadata_location::fromJson(web::json::value& val)
{
    if(val.has_field(U("altitude")))
    {
        setAltitude(ModelBase::doubleFromJson(val[U("altitude")]));
    }
    if(val.has_field(U("latitude")))
    {
        setLatitude(ModelBase::doubleFromJson(val[U("latitude")]));
    }
    if(val.has_field(U("longitude")))
    {
        setLongitude(ModelBase::doubleFromJson(val[U("longitude")]));
    }
}

void File_imageMediaMetadata_location::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_AltitudeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("altitude"), m_Altitude));
    }
    if(m_LatitudeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("latitude"), m_Latitude));
    }
    if(m_LongitudeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("longitude"), m_Longitude));
    }
}

void File_imageMediaMetadata_location::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("altitude")))
    {
        setAltitude(ModelBase::doubleFromHttpContent(multipart->getContent(U("altitude"))));
    }
    if(multipart->hasContent(U("latitude")))
    {
        setLatitude(ModelBase::doubleFromHttpContent(multipart->getContent(U("latitude"))));
    }
    if(multipart->hasContent(U("longitude")))
    {
        setLongitude(ModelBase::doubleFromHttpContent(multipart->getContent(U("longitude"))));
    }
}

double File_imageMediaMetadata_location::getAltitude() const
{
    return m_Altitude;
}


void File_imageMediaMetadata_location::setAltitude(double value)
{
    m_Altitude = value;
    m_AltitudeIsSet = true;
}
bool File_imageMediaMetadata_location::altitudeIsSet() const
{
    return m_AltitudeIsSet;
}

void File_imageMediaMetadata_location::unsetAltitude()
{
    m_AltitudeIsSet = false;
}

double File_imageMediaMetadata_location::getLatitude() const
{
    return m_Latitude;
}


void File_imageMediaMetadata_location::setLatitude(double value)
{
    m_Latitude = value;
    m_LatitudeIsSet = true;
}
bool File_imageMediaMetadata_location::latitudeIsSet() const
{
    return m_LatitudeIsSet;
}

void File_imageMediaMetadata_location::unsetLatitude()
{
    m_LatitudeIsSet = false;
}

double File_imageMediaMetadata_location::getLongitude() const
{
    return m_Longitude;
}


void File_imageMediaMetadata_location::setLongitude(double value)
{
    m_Longitude = value;
    m_LongitudeIsSet = true;
}
bool File_imageMediaMetadata_location::longitudeIsSet() const
{
    return m_LongitudeIsSet;
}

void File_imageMediaMetadata_location::unsetLongitude()
{
    m_LongitudeIsSet = false;
}

}
}
}
}

