/**
 * Drive
 * Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "PermissionList.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

PermissionList::PermissionList()
{
    m_Kind = U("");
    m_KindIsSet = false;
    m_NextPageToken = U("");
    m_NextPageTokenIsSet = false;
    m_PermissionsIsSet = false;
}

PermissionList::~PermissionList()
{
}

void PermissionList::validate()
{
    // TODO: implement validation
}

web::json::value PermissionList::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_KindIsSet)
    {
        val[U("kind")] = ModelBase::toJson(m_Kind);
    }
    if(m_NextPageTokenIsSet)
    {
        val[U("nextPageToken")] = ModelBase::toJson(m_NextPageToken);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Permissions )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("permissions")] = web::json::value::array(jsonArray);
        }
    }

    return val;
}

void PermissionList::fromJson(web::json::value& val)
{
    if(val.has_field(U("kind")))
    {
        setKind(ModelBase::stringFromJson(val[U("kind")]));
    }
    if(val.has_field(U("nextPageToken")))
    {
        setNextPageToken(ModelBase::stringFromJson(val[U("nextPageToken")]));
    }
    {
        m_Permissions.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("permissions")))
        {
        for( auto& item : val[U("permissions")].as_array() )
        {
            if(item.is_null())
            {
                m_Permissions.push_back( std::shared_ptr<Permission>(nullptr) );
            }
            else
            {
                std::shared_ptr<Permission> newItem(new Permission());
                newItem->fromJson(item);
                m_Permissions.push_back( newItem );
            }
        }
        }
    }
}

void PermissionList::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_KindIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("kind"), m_Kind));
        
    }
    if(m_NextPageTokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("nextPageToken"), m_NextPageToken));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Permissions )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("permissions"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
}

void PermissionList::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("kind")))
    {
        setKind(ModelBase::stringFromHttpContent(multipart->getContent(U("kind"))));
    }
    if(multipart->hasContent(U("nextPageToken")))
    {
        setNextPageToken(ModelBase::stringFromHttpContent(multipart->getContent(U("nextPageToken"))));
    }
    {
        m_Permissions.clear();
        if(multipart->hasContent(U("permissions")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("permissions"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Permissions.push_back( std::shared_ptr<Permission>(nullptr) );
            }
            else
            {
                std::shared_ptr<Permission> newItem(new Permission());
                newItem->fromJson(item);
                m_Permissions.push_back( newItem );
            }
        }
        }
    }
}

utility::string_t PermissionList::getKind() const
{
    return m_Kind;
}


void PermissionList::setKind(utility::string_t value)
{
    m_Kind = value;
    m_KindIsSet = true;
}
bool PermissionList::kindIsSet() const
{
    return m_KindIsSet;
}

void PermissionList::unsetKind()
{
    m_KindIsSet = false;
}

utility::string_t PermissionList::getNextPageToken() const
{
    return m_NextPageToken;
}


void PermissionList::setNextPageToken(utility::string_t value)
{
    m_NextPageToken = value;
    m_NextPageTokenIsSet = true;
}
bool PermissionList::nextPageTokenIsSet() const
{
    return m_NextPageTokenIsSet;
}

void PermissionList::unsetNextPageToken()
{
    m_NextPageTokenIsSet = false;
}

std::vector<std::shared_ptr<Permission>>& PermissionList::getPermissions()
{
    return m_Permissions;
}

void PermissionList::setPermissions(std::vector<std::shared_ptr<Permission>> value)
{
    m_Permissions = value;
    m_PermissionsIsSet = true;
}
bool PermissionList::permissionsIsSet() const
{
    return m_PermissionsIsSet;
}

void PermissionList::unsetPermissions()
{
    m_PermissionsIsSet = false;
}

}
}
}
}

