/**
 * Drive
 * Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * File_imageMediaMetadata.h
 *
 * Additional metadata about image media, if available.
 */

#ifndef File_imageMediaMetadata_H_
#define File_imageMediaMetadata_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "File_imageMediaMetadata_location.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// Additional metadata about image media, if available.
/// </summary>
class  File_imageMediaMetadata
    : public ModelBase
{
public:
    File_imageMediaMetadata();
    virtual ~File_imageMediaMetadata();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// File_imageMediaMetadata members

    /// <summary>
    /// The aperture used to create the photo (f-number).
    /// </summary>
    float getAperture() const;
    bool apertureIsSet() const;
    void unsetAperture();
    void setAperture(float value);
    /// <summary>
    /// The make of the camera used to create the photo.
    /// </summary>
    utility::string_t getCameraMake() const;
    bool cameraMakeIsSet() const;
    void unsetCameraMake();
    void setCameraMake(utility::string_t value);
    /// <summary>
    /// The model of the camera used to create the photo.
    /// </summary>
    utility::string_t getCameraModel() const;
    bool cameraModelIsSet() const;
    void unsetCameraModel();
    void setCameraModel(utility::string_t value);
    /// <summary>
    /// The color space of the photo.
    /// </summary>
    utility::string_t getColorSpace() const;
    bool colorSpaceIsSet() const;
    void unsetColorSpace();
    void setColorSpace(utility::string_t value);
    /// <summary>
    /// The exposure bias of the photo (APEX value).
    /// </summary>
    float getExposureBias() const;
    bool exposureBiasIsSet() const;
    void unsetExposureBias();
    void setExposureBias(float value);
    /// <summary>
    /// The exposure mode used to create the photo.
    /// </summary>
    utility::string_t getExposureMode() const;
    bool exposureModeIsSet() const;
    void unsetExposureMode();
    void setExposureMode(utility::string_t value);
    /// <summary>
    /// The length of the exposure, in seconds.
    /// </summary>
    float getExposureTime() const;
    bool exposureTimeIsSet() const;
    void unsetExposureTime();
    void setExposureTime(float value);
    /// <summary>
    /// Whether a flash was used to create the photo.
    /// </summary>
    bool getFlashUsed() const;
    bool flashUsedIsSet() const;
    void unsetFlashUsed();
    void setFlashUsed(bool value);
    /// <summary>
    /// The focal length used to create the photo, in millimeters.
    /// </summary>
    float getFocalLength() const;
    bool focalLengthIsSet() const;
    void unsetFocalLength();
    void setFocalLength(float value);
    /// <summary>
    /// The height of the image in pixels.
    /// </summary>
    int32_t getHeight() const;
    bool heightIsSet() const;
    void unsetHeight();
    void setHeight(int32_t value);
    /// <summary>
    /// The ISO speed used to create the photo.
    /// </summary>
    int32_t getIsoSpeed() const;
    bool isoSpeedIsSet() const;
    void unsetIsoSpeed();
    void setIsoSpeed(int32_t value);
    /// <summary>
    /// The lens used to create the photo.
    /// </summary>
    utility::string_t getLens() const;
    bool lensIsSet() const;
    void unsetLens();
    void setLens(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<File_imageMediaMetadata_location> getLocation() const;
    bool locationIsSet() const;
    void unsetLocation();
    void setLocation(std::shared_ptr<File_imageMediaMetadata_location> value);
    /// <summary>
    /// The smallest f-number of the lens at the focal length used to create the photo (APEX value).
    /// </summary>
    float getMaxApertureValue() const;
    bool maxApertureValueIsSet() const;
    void unsetMaxApertureValue();
    void setMaxApertureValue(float value);
    /// <summary>
    /// The metering mode used to create the photo.
    /// </summary>
    utility::string_t getMeteringMode() const;
    bool meteringModeIsSet() const;
    void unsetMeteringMode();
    void setMeteringMode(utility::string_t value);
    /// <summary>
    /// The rotation in clockwise degrees from the image&#39;s original orientation.
    /// </summary>
    int32_t getRotation() const;
    bool rotationIsSet() const;
    void unsetRotation();
    void setRotation(int32_t value);
    /// <summary>
    /// The type of sensor used to create the photo.
    /// </summary>
    utility::string_t getSensor() const;
    bool sensorIsSet() const;
    void unsetSensor();
    void setSensor(utility::string_t value);
    /// <summary>
    /// The distance to the subject of the photo, in meters.
    /// </summary>
    int32_t getSubjectDistance() const;
    bool subjectDistanceIsSet() const;
    void unsetSubjectDistance();
    void setSubjectDistance(int32_t value);
    /// <summary>
    /// The date and time the photo was taken (EXIF DateTime).
    /// </summary>
    utility::string_t getTime() const;
    bool timeIsSet() const;
    void unsetTime();
    void setTime(utility::string_t value);
    /// <summary>
    /// The white balance mode used to create the photo.
    /// </summary>
    utility::string_t getWhiteBalance() const;
    bool whiteBalanceIsSet() const;
    void unsetWhiteBalance();
    void setWhiteBalance(utility::string_t value);
    /// <summary>
    /// The width of the image in pixels.
    /// </summary>
    int32_t getWidth() const;
    bool widthIsSet() const;
    void unsetWidth();
    void setWidth(int32_t value);

protected:
    float m_Aperture;
    bool m_ApertureIsSet;
    utility::string_t m_CameraMake;
    bool m_CameraMakeIsSet;
    utility::string_t m_CameraModel;
    bool m_CameraModelIsSet;
    utility::string_t m_ColorSpace;
    bool m_ColorSpaceIsSet;
    float m_ExposureBias;
    bool m_ExposureBiasIsSet;
    utility::string_t m_ExposureMode;
    bool m_ExposureModeIsSet;
    float m_ExposureTime;
    bool m_ExposureTimeIsSet;
    bool m_FlashUsed;
    bool m_FlashUsedIsSet;
    float m_FocalLength;
    bool m_FocalLengthIsSet;
    int32_t m_Height;
    bool m_HeightIsSet;
    int32_t m_IsoSpeed;
    bool m_IsoSpeedIsSet;
    utility::string_t m_Lens;
    bool m_LensIsSet;
    std::shared_ptr<File_imageMediaMetadata_location> m_Location;
    bool m_LocationIsSet;
    float m_MaxApertureValue;
    bool m_MaxApertureValueIsSet;
    utility::string_t m_MeteringMode;
    bool m_MeteringModeIsSet;
    int32_t m_Rotation;
    bool m_RotationIsSet;
    utility::string_t m_Sensor;
    bool m_SensorIsSet;
    int32_t m_SubjectDistance;
    bool m_SubjectDistanceIsSet;
    utility::string_t m_Time;
    bool m_TimeIsSet;
    utility::string_t m_WhiteBalance;
    bool m_WhiteBalanceIsSet;
    int32_t m_Width;
    bool m_WidthIsSet;
};

}
}
}
}

#endif /* File_imageMediaMetadata_H_ */
