/**
 * Drive
 * Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "About_teamDriveThemes.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

About_teamDriveThemes::About_teamDriveThemes()
{
    m_BackgroundImageLink = U("");
    m_BackgroundImageLinkIsSet = false;
    m_ColorRgb = U("");
    m_ColorRgbIsSet = false;
    m_Id = U("");
    m_IdIsSet = false;
}

About_teamDriveThemes::~About_teamDriveThemes()
{
}

void About_teamDriveThemes::validate()
{
    // TODO: implement validation
}

web::json::value About_teamDriveThemes::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_BackgroundImageLinkIsSet)
    {
        val[U("backgroundImageLink")] = ModelBase::toJson(m_BackgroundImageLink);
    }
    if(m_ColorRgbIsSet)
    {
        val[U("colorRgb")] = ModelBase::toJson(m_ColorRgb);
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }

    return val;
}

void About_teamDriveThemes::fromJson(web::json::value& val)
{
    if(val.has_field(U("backgroundImageLink")))
    {
        setBackgroundImageLink(ModelBase::stringFromJson(val[U("backgroundImageLink")]));
    }
    if(val.has_field(U("colorRgb")))
    {
        setColorRgb(ModelBase::stringFromJson(val[U("colorRgb")]));
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::stringFromJson(val[U("id")]));
    }
}

void About_teamDriveThemes::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_BackgroundImageLinkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("backgroundImageLink"), m_BackgroundImageLink));
        
    }
    if(m_ColorRgbIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("colorRgb"), m_ColorRgb));
        
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
        
    }
}

void About_teamDriveThemes::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("backgroundImageLink")))
    {
        setBackgroundImageLink(ModelBase::stringFromHttpContent(multipart->getContent(U("backgroundImageLink"))));
    }
    if(multipart->hasContent(U("colorRgb")))
    {
        setColorRgb(ModelBase::stringFromHttpContent(multipart->getContent(U("colorRgb"))));
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::stringFromHttpContent(multipart->getContent(U("id"))));
    }
}

utility::string_t About_teamDriveThemes::getBackgroundImageLink() const
{
    return m_BackgroundImageLink;
}


void About_teamDriveThemes::setBackgroundImageLink(utility::string_t value)
{
    m_BackgroundImageLink = value;
    m_BackgroundImageLinkIsSet = true;
}
bool About_teamDriveThemes::backgroundImageLinkIsSet() const
{
    return m_BackgroundImageLinkIsSet;
}

void About_teamDriveThemes::unsetBackgroundImageLink()
{
    m_BackgroundImageLinkIsSet = false;
}

utility::string_t About_teamDriveThemes::getColorRgb() const
{
    return m_ColorRgb;
}


void About_teamDriveThemes::setColorRgb(utility::string_t value)
{
    m_ColorRgb = value;
    m_ColorRgbIsSet = true;
}
bool About_teamDriveThemes::colorRgbIsSet() const
{
    return m_ColorRgbIsSet;
}

void About_teamDriveThemes::unsetColorRgb()
{
    m_ColorRgbIsSet = false;
}

utility::string_t About_teamDriveThemes::getId() const
{
    return m_Id;
}


void About_teamDriveThemes::setId(utility::string_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool About_teamDriveThemes::idIsSet() const
{
    return m_IdIsSet;
}

void About_teamDriveThemes::unsetId()
{
    m_IdIsSet = false;
}

}
}
}
}

